<h1>About</h1>
<p>Repository: <a href="https://github.com/mdecourse/cmstemplate">https://github.com/mdecourse/cmstemplate</a></p>
<p>Github Pages: <a href="https://mde.tw/cmstemplate">https://mde.tw/cmstemplate</a></p>
<p>利用 cmstemplate 建立以 CMSiMDE 作為子模組的動態與靜態網站方法為:</p>
<ol>
<li>登入 Github 帳號</li>
<li>將瀏覽器指向 <a href="https://github.com/mdecourse/cmstemplate">https://github.com/mdecourse/cmstemplate</a></li>
<li>利用 <span style="background-color: #00ff00;">Use this template</span> 按鈕建立倉儲</li>
</ol>
<p>clone 帶有 CMSiMDE 的指令:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">git clone --recurse-submodules URL</pre>
<p>上述 URL 即為希望將倉儲資料取下進行改版的 Github 倉儲網路統一資源位置, 也就是 Github 倉儲網址.</p>
<p>每一個以 cmstemplate 為 template 的倉儲, 其根目錄都帶有:</p>
<ol>
<li><span style="background-color: #ffff99;">init.py</span> - 其中的 site_title, ip 與 port 可以讓使用者自行修改, site_title 是網站標題, ip 為動態網站啟動時所使用的網路位址, 可設為內部或外部 IPv4 (IPv6), port 則是動態網站啟動時所佔用的埠號.</li>
<li><span style="background-color: #ffff99;">http-server.py</span> - 執行後會使用內建的 localhost 與 port 8444 伺服 content 子目錄中的 CMSiMDE 靜態網頁.</li>
<li><span style="background-color: #ffff99;">cms.bat</span> - 讓使用者執行動態網站用的批次檔案.</li>
<li><span style="background-color: #ffff99;">acp.bat</span> - 若使用者已經將倉儲設為 ssh 連線, 且提供遠端與近端的認證模式, 則可以在執行此批次指令之後加上提交字串, 即可執行 git add ., git commit -m "提交訊息", 以及 git push 等三個指令.</li>
</ol>
<h1>CMSiMDE</h1>
<p>CMSiMDE (<a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a>) 是一套以 Python 與 Flask 框架編寫的網際內容管理系統,</p>
<p>使用 CMSiMDE 建議使用者安裝 flask flask_cors bs4 lxml pelican markdown leo 等模組. 其中的 flask flask_cors bs4 lxml pelican markdown為啟動 CMSiMDE 的必要模組, 而 leo 則是 CMSMDE 開發者所使用的大綱管理工具, 可以用於與 CMSiMDE 整合的 Pelican blog 及 Reveal.js 網際簡報編輯之用.</p>
<h2>基本操作</h2>
<p>當使用者利用 cms.bat 啟用動態網站後, 即可利用瀏覽器 <a>https://localhost:9443</a> 在近端維護網站內容, 由於此時動態網站僅在 localhost 啟動, 因此可以使用內建的管理者密碼 "admin" 登入管理網站內容.</p>
<p>假如使用者修改 init.py 中的 ip 或 uwsgi 設定, 讓動態網站在外部 IP 啟動, 則必須自行透過動態網站中的 <span style="background-color: #ffff99;">config</span> 指令修改管理者密碼.</p>
<p>動態網站編輯表單中的 <span style="background-color: #ffff99;">config</span> 除了可更改網站管理者密碼外, 也可以更改網站的頁面內容標題 (外部標題可以透過 init.py 中的 site_title 更改).</p>
<h3>編輯網頁內容</h3>
<p>編輯 CMSiMDE 動態網站中的內容, 可以透過表單中的 <span style="background-color: #ffff99;">Edit All</span> 或 <span style="background-color: #ffff99;">Edit</span> 按鈕進行. <span style="background-color: #ffff99;">Edit</span> 可用於單頁編輯, 操作時先選擇左側的頁面標題, 等系統顯示該頁面內容後, 再點擊上方的 <span style="background-color: #ffff99;">Edit</span> 按鈕即可進入該頁面的編輯模式.</p>
<p><span style="background-color: #ffff99;">Edit All</span> 通常用於單次刪除所有頁面內容或者只保留特定頁面用, 點擊後會將所有頁面內容置於編輯器中.</p>
<h3>上傳與引用檔案</h3>
<p><span style="background-color: #000000; color: #ffffff;">File Upload</span> 可以讓使用者選擇近端多個檔案上傳至動態系統中的 downloads 目錄.</p>
<p>引用使用者上傳的檔案</p>
<p style="padding-left: 30px;"><a href="/downloads/python_book_01.pdf">python_book_01.pdf</a></p>
<h3>上傳與引用圖片</h3>
<p><span style="background-color: #000000; color: #ffffff;">Image Upload</span> 可以讓使用者選擇近端多個檔案上傳至動態系統中的 downloads 目錄.</p>
<p>引用使用者上傳的檔案</p>
<p style="padding-left: 30px;"><img caption="false" class="add_border" height="227" src="/images/nfu_logo_mde.png" width="200"/></p>
<p style="padding-left: 30px;"></p>
<h3>嵌入程式碼</h3>
<p>利用 Insert/Edit code 功能, 可以嵌入各種程式碼:</p>
<pre class="brush:dart;auto-links:false;toolbar:false" contenteditable="false">// 下列 Dart 程式, 利用 Runge Kutta 迭代運算法, 解常微分方程式
// 設 t 為時間, x 則設為物體的位移
// dx / dt = (t - x)/2, 起始值 t0=0, x0=1, 求 t=2 時的 x 值
//
// 已知起始值 t0 與 x0 後, 可以利用下列 rungeKutta 函式, 以
// h 為每步階增量值, 求 dxdt 常微分方程式任一 t 的對應值 x
// 定義函式 rungeKutta, 共有四個輸入變數
rungeKutta(t0, x0, t, h) {
  // 利用步階增量值 h 與 t 的起始及終點值
  // 計算需要迭代的次數 n
  int n = ((t - t0) / h).toInt();
  // 宣告 x 為雙浮點數, 且設為起始值 x0
  double x = x0;
  // 利用已知的 t0, x0, t 終點值與步階增量值 h, 迭代求 x 對應值
  // 索引值 i 將每次增量 1, 從 i=1 執行 for 環圈至 i=n
  for (int i = 1; i &lt;= n; i++) {
    // 將此階段的 t 與 x 值代入 dxdt 函式求下列四個浮點變數值
    double k1 = h * dxdt(t0, x);
    double k2 = h * dxdt(t0 + 0.5 * h, x + 0.5 * k1);
    double k3 = h * dxdt(t0 + 0.5 * h, x + 0.5 * k2);
    double k4 = h * dxdt(t0 + h, x + k3);
    // 利用上述四個變數值求此步階增量後的對應 x 值
    x = x + (1.0 / 6.0) * (k1 + 2 * k2 + 2 * k3 + k4);
    // 每次 for 迴圈執行最後, 準備計算下一個步階增量後的 x 對應值
    // t 起始值配合步階增量值 h, 進行增量
    t0 = t0 + h;
  }
  // 完成 for 迴圈迭代後, 傳回與 t 終點值對應的 x 值
  return x;
}

// 將微分方程式 "dx / dt = (t - x)/2" 定義為 dxdt 函式
dxdt(t, x) {
  return ((t - x) / 2);
}

// 定義 main() 主函式內容, 目的在利用 rungeKutta 函式
// 解常微分方程式
main() {
// Driver method
// num 資料型別可以是整數或雙浮點數
  num t0 = 0;
  num x = 1;
  num t = 2;
  double h = 0.2;
  print('The value of x at t=$t is: ${rungeKutta(t0, x, t, h)}');
}
</pre>
<p></p>
<h3>嵌入影片檔</h3>
<p>直接利用 Source code 功能, 將影片檔案的 iframe 標註放入後存檔:</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/bZupkkT4T5c" width="560"></iframe></p>
<h3>檢視 STL</h3>
<p>使用 Github 所提供的 STL viewer 嵌入 github.com/mdecourse/cmstemplate main branch 中 downloads 目錄中的 spikeball.stl</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;script src="https://embed.github.com/view/3d/mdecourse/cmstemplate/main/downloads/spikeball.stl"&gt;&lt;/script&gt;</pre>
<p>將上列 script 標註放入頁面 HTML 內容後, 可以檢視 STL 零件檔案.</p>
<p></p>
<p>
<script src="https://embed.github.com/view/3d/mdecourse/cmstemplate/main/downloads/spikeball.stl"></script>
</p>
<p>以 CMSiMDE 內建的 static/viewstl.html 檢視 STL 檔案:</p>
<p>使用 iframe 其 src 指向 STL 檔案的絕對 URL 路徑:</p>
<p>/static/viewstl.html?src=https://mde.tw/cmstemplate/downloads/spikeball.stl</p>
<p>就可以如下檢視 downloads/spikeball.stl</p>
<p><iframe height="400" src="/static/viewstl.html?src=https://mde.tw/cmstemplate/downloads/spikeball.stl" width="600"></iframe></p>
<h2>Gitlab 同步</h2>
<p>利用 git remote add gitlab <a href="https://gitlab.com/user/repository.git">https://gitlab.com/user/repository.git</a> 可以在近端倉儲中的 .git/config 中新增一個名稱為 gitlab, 且與 <a href="https://gitlab.com/user/repository.git">https://gitlab.com/user/repository.git</a> 倉儲對應的設定. 使用者可以將此倉儲改版內容以 git push gitlab 推向 Gitlab.</p>
<p>至於 Gitlab Pages 額外需要下列 .yml 檔案進行轉換設定:</p>
<p>.gitlab-ci.yml</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">pages:
  stage: deploy
  script:
  - mkdir .public
  - cp -r * .public
  - mv .public public
  artifacts:
    paths:
    - public
  only:
  - master
variables:
  GIT_SUBMODULE_STRATEGY: recursive</pre>
<p></p>
<h2>Heroku 部署</h2>
<p>與 Heroku 部署有關資訊請參考: <a href="https://mde.tw/cp2020/content/Heroku.html">https://mde.tw/cp2020/content/Heroku.html</a></p>
<h2>Fossil SCM</h2>
<p>在 Github 之外, 可以同步將各倉儲資料存放至 Gitlab, Heroku (有 500 MB 容量限制) 與 Fossil SCM.</p>
<p>希望整合 Github 與 Fossil SCM 倉儲步驟說明如下:</p>
<p>針對 Github 中已經有 <a href="https://github.com/mdecourse/cmstemplate">https://github.com/mdecourse/cmstemplate</a> 倉儲, 希望同步建 <a href="https://fossil.kmol.info/cmstemplate">https://fossil.kmol.info/cmstemplate</a> 與之內容同步.</p>
<p>登入 fossil.kmol.info 主機, 在 /home/user/repository 目錄中, 以 fossil init cmstemplate.fossil 建立空倉儲. 此時 Fossil SCM 將會列出以登入帳號作為帳號的管理者密碼.</p>
<p>管理者利用 <a href="https://fossil.kmol.info/cmstemplate">https://fossil.kmol.info/cmstemplate</a> 連結, 以 user 登入, 並利用上列管理者密碼進入管理區, 先行透過 Setup/users 變更 user 對應密碼.</p>
<p>回到 Windows 以 <span style="background-color: #ffff99;">fossil clone https://user@fossil.kmol.info/cmstemplate cmstemplate.fossil</span> 取下倉儲資料, 過程中將需要輸入與 user 對應的密碼, 並被詢問是否儲存密碼, 若選擇儲存密碼則隨後的 fossil commit 將回自動提交推送.</p>
<p>接著在近端必須開啟空 cmstemplate.fossil 倉儲, 主要目的是取得 __FOSSIL__, 並且以 git pull 完整拉下位於 <a href="https://github.com/mdecourse/cmstemplate">https://github.com/mdecourse/cmstemplate</a> 中的資料並與空 __FOSSIL__ 進行整合. 其中在 Fossil SCM 端必須將 Setup/Settings 中的 default-csp 設為: <a href="https://fonts.googleapis.com">https://fonts.googleapis.com</a> (讓 CMSiMDE 靜態網頁可以在 Fossil SCM doc 頁面中正常顯示), 且勾選 dotfiles (讓 Fossil SCM 可以儲存 .git 中的版本資料).</p>
<p></p>
<h4>參考資料:</h4>
<p>編譯 Fossil SCM:</p>
<p style="padding-left: 30px;"> <a href="http://project.mde.tw/blog/zai-msys2-huan-jing-bian-yi-fossil-scm.html">http://project.mde.tw/blog/zai-msys2-huan-jing-bian-yi-fossil-scm.html</a></p>
<h1>建立網頁</h1>
<p>由於 CMSiMDE 帶有動態網頁與靜態網頁等兩個部分, 動態網頁執行時需要該伺服器能夠執行 Python 3, 以及 flask flask_cors bs4 lxml pelican markdown 等模組. 而靜態網頁的伺服則只需要 WWW Server 即可.</p>
<p>若使用者在 Github 使用 CMSiMDE 建立網頁, 可以透過 <a href="https://github.com/mdecourse/cmstemplate">https://github.com/mdecourse/cmstemplate</a> template 建立, 步驟與兩種設定方式如下:</p>
<ol>
<li>使用者登入 Github</li>
<li>將瀏覽器連線至 <a href="https://github.com/mdecourse/cmstemplate">https://github.com/mdecourse/cmstemplate</a> 頁面後, 點擊 Use this template 按鈕後, 選擇所要採用的 repository 名稱後, 就可以建立以 CMSiMDE 作為子模組的 Github 倉儲.</li>
<li>假如使用者所選擇的倉儲名稱為: 帳號.github.io, 則 Github 會自動設定該倉儲的 main 分支為 Github Pages 根目錄, 意即一旦 Github Pages 完成轉檔 (提交訊息之後會出現綠勾), 則該倉儲的對應網頁將為: https://帳號.github.io</li>
<li>若使用利用 <a href="https://github.com/mdecourse/cmstemplate">https://github.com/mdecourse/cmstemplate</a> 作為 template 所建立的倉儲名稱並非 帳號.github.io, 則使用者必須自行至該倉儲的 settings/Github Pages 選項中將 main branch 設為 Github Pages 對應的 root 目錄. 之後, Github 將會採用: 帳號.github.io/倉儲名稱 作為與該倉儲對應的 Github Pages 網址.</li>
</ol>
<h1>注意事項</h1>
<p>因為 <a href="https://github.com/mdecourse/cmstemplate">https://github.com/mdecourse/cmstemplate</a> 將 CMSiMDE 倉儲作為 submodule, 因此使用者利用 cmstemplate 作為 template 後, 必須使用 git clone --recurse-submodules 取下遠端倉儲.</p>
<p>例如:</p>
<p style="padding-left: 30px;">若使用者的倉儲 URL 為 <a href="https://github.com/mdecourse/cmstemplate">https://github.com/mdecourse/cmstemplate</a></p>
<p style="padding-left: 30px;">則可以在近端利用:</p>
<p style="padding-left: 30px;">git clone --recurse-submodules <a href="https://github.com/mdecourse/cmstemplate.git">https://github.com/mdecourse/cmstemplate.git</a></p>
<p style="padding-left: 30px;">將遠端倉儲資料存入 cmstemplate 目錄中.</p>
<p>目前的 cmstemplate 內建 cms.bat 與 acp.bat 等兩個 batch 檔案, 可以協助使用者直接在倉儲根目錄啟動 CMSiMDE 動態網頁, 以及單一指令式即可完成 git add, git commit 以及 git push, 但是前提是使用者必須設定以 ssh 方式與 Github 倉儲進行驗證.</p>
<p>例如:</p>
<p style="padding-left: 30px;">若使用者已經將倉儲內容 clone 至近端, 且已經帶有 cmsimde 子模組的內容.</p>
<p style="padding-left: 30px;">則可以在近端命令列進入 cmstemplate 倉儲目錄執行:</p>
<p style="padding-left: 30px;">cms.bat</p>
<p style="padding-left: 30px;">開啟動態網頁系統. 並以 <a>https://localhost:9443</a> 開啟.</p>
<p style="padding-left: 30px;">一旦完成動態網頁的編輯, 利用 Generate Pages 可以轉為靜態網站, 且各 html 檔案將位於 content 目錄中.</p>
<p style="padding-left: 30px;">若使用者希望檢查近端靜態網頁的內容, 可以利用 SciTE 開啟倉儲中的 http-server.py, 並利用瀏覽器以 <a href="https://localhost:8444">https://localhost:8444</a> 檢查靜態網頁內容.</p>
<p style="padding-left: 30px;">一旦使用者要將近端倉儲的動態與靜態網頁內容推向 Github, 則必須將倉儲中 .git/config 的 url, 從 https 改為 ssh 的連線格式:</p>
<p style="padding-left: 30px;">例如:</p>
<p style="padding-left: 60px;">原先 .git/config origin 的 url 為 url = <a href="https://github.com/mdecourse/cmstemplate.git,">https://github.com/mdecourse/cmstemplate.git,</a> 則必須改為:</p>
<p style="padding-left: 60px;">url = <a href="mailto:git@github.com:mdecourse/cmstemplate.git">git@github.com:mdecourse/cmstemplate.git</a></p>
<p style="padding-left: 60px;">之後假如使用者要以 "add some files" 字串當作提交說明訊息, 則可以在命令列中的倉儲目錄執行:</p>
<p style="padding-left: 60px;">acp.bat "add some files"</p>
<h2>標題選擇</h2>
<p>由於 CMSiMDE 中的動態網站透過 config/content.htm 的 H1~H3 超文件標註進行分頁, 因此使用者利用 cms.bat 開啟動態網站後, 必須注意各頁面標題文字的選擇:</p>
<ol>
<li><span style="background-color: #ffff99;">頁面標題文字儘量簡短</span> - 頁面標題就有如文章的章節標題, 只要該標題具有該頁面內容的代表性即可, 越簡短越好.</li>
<li><span style="background-color: #ffff99;">頁面標題文字不要使用標點符號</span> - 因為標點符號中的 "/" 會造成頁面擷取時 URL 指令分段上的誤判, 至於標題文字中若有 ":" 則會在動態內容轉靜態內容時, 因 Windows 不允許檔案名稱帶有 ":" 而無法轉檔.</li>
<li><span style="background-color: #ffff99;">頁面標題中不可以有超文件標註</span> - 由於 CMSiMDE 動態網站編輯器採用 GUI 進行, 採用滑鼠標修頁面標題時, 可能無意中將 HTML 標註放入 H1~H3 標題文字中, 如此可能會造成 CMSiMDE 分頁錯誤而無法開啟動態網站. 當使用者要檢查所使用的頁面標題是否帶有 html 標註, 可以透過編輯功能中的 Source Code 檢查.</li>
<li><span style="background-color: #ffff99;">H1 標題數量不可過多</span> - 由於 CMSiMDE 的靜態網站支援手機模式, 當頁面 H1 標題數量超過 10 個之後, 頁面標題可能無法在螢幕上最上方以一列顯示, 而是必須出現在第二行, 結果將會導致頁面展開時的 Javascript 程式產生錯亂, 結果為無法直接以滑鼠點擊進入特定頁面.</li>
</ol>
<p></p>
<p></p>
<h2>靜態網頁 404</h2>
<p>當使用者將近端網頁倉儲資料推向 Github 後, commit 提交訊息之後若沒有出現綠勾, 表示靜態網頁無法轉檔成功, 這時連接靜態網頁時, 將會出現 404, 通常情況下是因為倉儲中 cmsimde 子模組的版次無法與遠端 <a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a> 中的版本對應.</p>
<p>上述靜態網頁出現 404 錯誤訊息的處理方式如下:</p>
<ol>
<li>從 <a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a> 倉儲中複製最新版本的版次號, 以 <a href="https://github.com/mdecourse/cmsimde/commit/1c3aeec1f5d26b421743d2f5ef8bb7d5b99292af">2021/03/03 的版次</a>為例, 版次號為 1c3aeec1f5d26b421743d2f5ef8bb7d5b99292af, 使用者只需要最前面的 7 個字元, 也就是 1c3aeec.</li>
<li>然後在近端倉儲中, 以命令列進入 cmsimde 目錄後執行: <span style="background-color: #ffff99;">git checkout 1c3aeec</span></li>
<li>接著退回倉儲目錄, 以 git add, git commit 及 git push 將倉儲改版內容推向 Github 後應該就可以將倉儲正確轉為靜態網站內容.</li>
</ol>
<h2>動態網站錯誤</h2>
<p>CMSiMDE 動態網站經常出現的錯誤是無法對 config/content.htm 分頁, 這時可以利用 SCiTE 編輯 content.htm, 找尋是否 H1~H3 標註中是否帶有特殊符號, 如 "/" 或 ":" 等.</p>
<h1>延伸開發</h1>
<p>為了建立 responsive site:</p>
<p>靜態網頁:</p>
<p style="padding-left: 30px;">Javascript 程式庫:</p>
<p style="padding-left: 60px;"><a href="https://getbootstrap.com/">https://getbootstrap.com/</a></p>
<p>動態系統:</p>
<p style="padding-left: 30px;">Javascript editor</p>
<p style="padding-left: 60px;">TinyMCE: <a href="https://www.tiny.cloud/">https://www.tiny.cloud/</a></p>
<p style="padding-left: 30px;">Syntax highlighter: <a href="https://prismjs.com/">https://prismjs.com/</a></p>
<p style="padding-left: 30px;">Ajax bit by bit file uploader:</p>
<p style="padding-left: 30px;">Flask</p>
<p style="padding-left: 30px;">Flask_cors</p>
<p style="padding-left: 30px;">bs4</p>
<p style="padding-left: 30px;">lxml</p>
<p style="padding-left: 30px;">markdown</p>
<h1>課程</h1><h2>w5</h2>
<p>各分組開始執行 W4-W9 的分組專案 (延續<span> </span><a href="http://mde.tw/wcm2021/content/Topic%200.html">Topic0</a><span> </span>的程式開發), 並從下列台灣未來 10 年科技願景內容中, 確認此舉隸屬未來創新教育體系 (<span>多元適性, 未來產業人才, 終身學習</span>) 的一環.</p>
<p>創新教育體系下, 個人學習心態 (Mindset):</p>
<ol>
<li>多元適性 -<span> </span><span>自主知識</span>學習, 動手<span>實作驗證知識效用</span>, 發揮<span>個人特色</span>. (<a href="https://github.com/mdecourse/wcm2021/tree/main/downloads/textbooks">開放專業教材範例</a>)</li>
<li>未來產業人才 -<span> </span><span>數位化</span>多元環境下 (<span>分散式版次管理</span>,<span> </span><span>區塊鍊, AI</span>), 充分與產業發展及需求結合. (<a href="https://git-scm.com/book/en/v2">Pro Git</a>,<span> </span><a href="http://mde.tw/wcm2021/downloads/blockchain/BlockchainTextBook.pdf">Blockchain</a>,<span> </span><a href="http://mde.tw/wcm2021/downloads/ai/Design_and_Development_of_High_School_AI.pdf">AI</a>)</li>
<li>終身學習 - 以<span>敏捷</span><span> </span>(Agile) 及<span>彈性</span><span> </span>(Flexible) 學習, 適應未來科技與自然環境的變化. (<a href="https://link.springer.com/book/10.1007/978-3-319-73842-0">The Scrum Culture</a>)</li>
</ol>
<p>還沒有啟用 SSH 對 Github 推送的學員, 請參考<span> </span><a href="http://mde.tw/cd2021/content/SSH%20%E4%BA%86%E6%B2%92.html">SSH 了沒</a><span> </span>中的說明, 儘快啟用.</p>
<p>一旦 Github session 設定完成, 可以從 [HKEY_CURRENT_USER\SOFTWARE\SimonTatham] 將 registry 設定匯出存為 y:\my_github.reg, 並在 start_ipv6.bat 中以  regedit.exe /S y:\my_github.reg 將設定匯入.</p>
<h4>台灣 2030 科技願景:</h4>
<p><a href="http://mde.tw/wcm2021/downloads/taiwan_2030_tech_vision.pdf">taiwan_2030_tech_vision.pdf</a></p>
<p>台灣2030—創新、包容、永續, 實現樂活社會、高值經濟、強韌環境、普惠科技、創新教育等五大目標.</p>
<p>鑒於IoT、AI 與區塊鏈等新科技應用越趨成熟，數位化轉型趨勢已然成形.</p>
<ol>
<li>數位科技驅動的創新社會 - 產業創新, 跨域加乘, 勞動升級.</li>
<li>跨文化、族群、世代的多元包容社會 - 長幼安居, 青壯樂業, 族群多元.</li>
<li>循環再生、零污染、智慧強韌的永續社會 - 循環生態, 韌性家園.</li>
</ol>
<p><img alt="" height="373" src="http://mde.tw/wcm2021/images/2030_tech_vision_targets.png" width="800"/></p>
<h4>WCM2021 Programming Project:</h4>
<p>目前的<span> </span><a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a>  只提供將動態文件 config/content.htm 轉為 content 中各靜態頁面的功能, 為了能夠整理上述 CoppeliaSim 說明文件的轉換, 首先需要建立將 content 中各頁面, 設法集結為 config/content.htm 的功能, 而這項任務將列為<span> </span><a href="https://mde.tw/wcm2021">https://mde.tw/wcm2021</a>  課程中的網際內容管理課程專案.</p>
<h4>參考資料:</h4>
<p><a href="http://mde.tw/cd2021/content/W5.html">http://mde.tw/cd2021/content/W5.html</a></p>
<p><a href="https://github.com/mdecourse/copsim/discussions/1">https://github.com/mdecourse/copsim/discussions/1</a></p>
<p><a href="https://github.com/showdownjs/showdown">https://github.com/showdownjs/showdown</a></p>
<p><a href="https://github.com/cyberbotics/webots">https://github.com/cyberbotics/webots</a></p>
<p><a href="https://github.com/CoppeliaRobotics">https://github.com/CoppeliaRobotics</a></p>
<p><a href="https://github.com/cyberbotics">https://github.com/cyberbotics</a></p>
<p><a href="https://github.com/bulletphysics/bullet3/tree/master/examples/pybullet">https://github.com/bulletphysics/bullet3/tree/master/examples/pybullet</a></p>
<p><a href="http://a.kmol.info:88/">http://a.kmol.info:88/</a></p>
<h3>創新教育</h3>
<h6>創新教育有下列三項策略:</h6>
<ol>
<li>
<h6>推動多元適性教育</h6>
</li>
<li>
<h6>培育未來產業人才</h6>
</li>
<li>
<h6>營造終身學習環境</h6>
</li>
</ol>
<h6></h6>
<ol>
<li>
<h6>推動多元適性教育</h6>
<h6>策略說明:</h6>
<h6>科技顛覆工作與就業所需的技能, 因此學齡教育更需要能夠按照學童的能力、興趣及需求, 提供<span>個人化的教學方式</span>, 並且創造公平學習機會, 強化學童<span>自主學習與動手實作</span>的動機, 朝向<span>深度知識學習</span>, 進而為未來社會與公民做出有意義的貢獻.</h6>
<h6>回應族群:</h6>
<h6>滿足學童自我探索知識且能深入理解內容的需求, 包含對於知識資訊、概念想法、實作技巧與直覺等, 並<span>建立同儕認同感, 以共同合作取代競爭</span>觀念; 提供橋接多元教育及升學途徑之認證體系, 緩減家長經濟負擔與學童學習壓力.</h6>
<h6>國際標竿:</h6>
<h6>愛沙尼亞推動<span>全面的數位科技教育應用</span>, 讓學生能充分獲得數位技能, 例如"ekool" 和 "Stuudium" 能協助教師與家長討論學童學習狀況和教學方法的平台, "電子書包(e-Scoolbag)" 提供數位教材, 如電子教科書、互動遊戲, 且能蒐集學習數據.</h6>
<h6>新加坡自 2019 年開始逐步<span>取消中小學考試</span>, 從傳統的菁英教育轉型為提供公平教育機會、培育未來人才的搖籃, 改為採用 "<span>課堂評估</span>" 瞭解學生學習狀況, 讓老師能以彈性的方式取代制式教學, 注重每一個學生個體的成長與發展.</h6>
<h6>建議推動方向:</h6>
<h6>- 科技輔助自主深度學習</h6>
<h6>- 協助彌平城鄉數位落差</h6>
<h6>2. 培育未來產業人才</h6>
<h6>策略說明:</h6>
<h6>依據未來產業發展階段之可能需求,<span> </span><span>培養數位人才</span>, 並縮短學用落差. 理解產業需求脈絡, 建置<span>數位化勞動技能地圖</span>, 以科技強化職場與技職教育連結, 讓<span>學歷、技能與資歷認證流程數位化</span>. 同時也應標靶式鎖定特定領域, 強化延攬與留住專業人才, 使人才供應更活化多元.</h6>
<h6>回應族群:</h6>
<h6>回應中壯年面對自動化科技持續演進趨勢下, 將被迫面臨專業或就業轉換的挑戰, 跨越技能落差, 破除求職障礙; 滿足青年族群預判職業發展所需具備技能, 強化教育與職場連結的人才培育; 滿足產業界對於高階人才(如科技、數位人才)的需求, 支持國內產業轉型.</h6>
<h6>國際標竿:</h6>
<h6>美國勞工部的生涯輔導網站 CareerOneStop, 提供整合職業生涯訊息的網路平台, 目的在於幫助求職者、學生、勞工、人資單位及雇主, 可以有效運用資源藉以達到自我發展, 並在新經濟環境下做出有效的決策. 更提供美國地區的未來就業預測, 針對不同教育程度提供未來 10 年就業的可能環境.</h6>
<h6>體驗新加坡 (Contact  Singapore) 計劃: 海內外共設有 9 個專門吸引外籍專業人士及海外學生的據點, 提供最新的就業規範及生活訊息. 透過寬鬆的專業人士移民政策、外籍專業人士稅賦優惠及親屬安置、個人化就業許可證、維持良好生活環境等, 提高人才駐留入籍的誘因.</h6>
<h6>建議推動方向:</h6>
<h6>‒創建<span>勞動與數位技能地圖</span>連結職場</h6>
<h6>‒推動<span>目標導向</span>專業人才平台設置</h6>
<h6>3.<span> </span><span>營造終身學習環境</span></h6>
<h6>策略說明:</h6>
<h6>協助建立終身學習平台, 可記錄實體和數位技能學習的進程與軌跡, 提供多元微課程的推薦服務, 能夠自主選擇培養興趣課程或累積培訓進修權利, 可輕鬆參與學習社群, 分享學習資源或合作實踐成果, 增加學習的持久性並促進社會參與.</h6>
<h6>回應族群:</h6>
<h6>滿足中高齡與高齡者終身學習與持續貢獻社會的需求, 提供能按自有學習經驗, 連結吸收新知的管道或加入學習社群; 同時, 也提供教育工作者研究及交流數位教學方法內容之設計, 協助教師社群應用數位工具, 發展創新的教學模式.</h6>
<h6>國際標竿:</h6>
<h6>新加坡終身學習及培訓帳戶 "SkillsFuture" 提供 25 歲以上的新加坡公民每年新加坡幣 500 元 (約新台幣一萬元) 的津貼, 讓<span>公民能夠選修超過 200 堂技能加值與進修課程</span>, 另外也提供額外 500 元新幣協助 40 到 60 歲的勞工就業或轉職.</h6>
<h6>愛沙尼亞的教育資訊系統 (EHIS) 儲存 2005 年以來, 學生受教的資訊與統計數據, 能夠協助老師調整教學方法, 成為政府確保未來勞動力的重要依據, 也能<span>促進老師和教育科技廠商共同開發新的科技教材、教具</span>, 啟發學生自主學習動機.</h6>
<h6>建議推動方向:</h6>
<h6>‒打造<span>全齡個人學習帳戶</span></h6>
<h6>‒推動<span>數位師資</span>培訓革新</h6>
</li>
</ol><h3>網際程式開發</h3>
<h6>實習目的:</h6>
<ol>
<li>
<h6>利用網際模組擷取資料 (<a href="https://requests.readthedocs.io/en/master/">Python requests</a>)</h6>
</li>
<li>
<h6>利用 bs4 擷取網頁資料</h6>
</li>
<li>
<h6>利用 Flask 編寫網際程式</h6>
</li>
<li>
<h6>利用 Heroku 部署網際程式</h6>
</li>
<li>
<h6>利用 Ubuntu 虛擬主機作為伺服器</h6>
</li>
</ol>
<h6>先看懂<span> </span><a href="https://github.com/mdecourse/scissor-rock-paper2/blob/main/wsgi.py">https://github.com/mdecourse/scissor-rock-paper2/blob/main/wsgi.py</a></h6>
<h6><span class="pl-s1">request</span>.<span class="pl-s1">args</span>.<span class="pl-en">get</span>(<span class="pl-s">'user'</span>) 以 GET 方式取得 user 出拳變數值</h6>
<h6>電腦出拳以亂數取值</h6>
<h6>兩者比較後傳回超文件顯示比賽結果</h6>
<h6>部署到 Heroku 需要<span> </span><a href="https://raw.githubusercontent.com/mdecourse/scissor-rock-paper2/main/requirements.txt">requirements.txt</a>,<span> </span><a href="https://raw.githubusercontent.com/mdecourse/scissor-rock-paper2/main/runtime.txt">runtime.txt</a><span> </span>與<span> </span><a href="https://raw.githubusercontent.com/mdecourse/scissor-rock-paper2/main/Procfile">Procfile</a>.</h6>
<h6>接著請試著透過<span> </span><a href="http://mde.tw/lab/content/Heroku.html">http://mde.tw/lab/content/Heroku.html</a><span> </span>與<span> </span><a href="http://mde.tw/cp2020/content/Heroku.html">http://mde.tw/cp2020/content/Heroku.html</a><span> </span>的導引, 將<span> </span><a href="http://mde.tw/wcm2021/content/Topic%200.html">Topic0</a><span> </span>中的機械設計系實驗室排課時間表程式部署到 Heroku. 至於個人 Github 靜態網站也可以同步一份到 Heroku.</h6>
<h6>Beautifulsoup 參考教材:</h6>
<h6><a href="http://mde.tw/wcm2021/downloads/beautifulsoup.pdf">beautifulsoup.pdf</a></h6>
<h6><a href="http://mde.tw/wcm2021/downloads/WebScraping_with_bs4.pdf">WebScraping_with_bs4.pdf</a></h6>
<h6><a href="http://mde.tw/wcm2021/downloads/beautiful_soup_tutorial.pdf">beautiful_soup_tutorial.pdf</a></h6>
<h6><a href="http://mde.tw/wcm2021/downloads/2019_beautifulsoup_document.pdf">2019_beautifulsoup_document.pd</a></h6>
<h6>Flask 參考教材:</h6>
<h6><a href="http://mde.tw/wcm2021/downloads/flask.pdf">flask.pdf</a></h6>
<h6><a href="http://mde.tw/wcm2021/downloads/flask_tutorial.pdf">flask_tutorial.pdf</a></h6>
<h6><a href="http://mde.tw/wcm2021/downloads/flask_document.pdf">flask_document.pdf</a></h6>
<h6><a href="http://mde.tw/wcm2021/downloads/2021_flask_document.pdf">2021_flask_document.pdf</a></h6>
<h6><a href="https://realpython.com/primer-on-python-decorators/">https://realpython.com/primer-on-python-decorators/</a></h6>
<h6><a href="https://www.programiz.com/python-programming/decorator">https://www.programiz.com/python-programming/decorator</a></h6>
<h6><a href="https://www.python-course.eu/python3_decorators.php">https://www.python-course.eu/python3_decorators.php</a></h6>
<h6>Python has a feature called decorators to add functionality to an existing code. This is also called metaprogramming because a part of the program tries to modify another part of the program at compile time.</h6>
<h6>Decorators allow us to wrap another function in order to extend the behavior of the wrapped function, without permanently modifying it.</h6>
<h6>Heroku 參考教材:</h6>
<h6><a href="http://mde.tw/cp2020/content/Heroku.html">http://mde.tw/cp2020/content/Heroku.html</a></h6>
<h6><a href="http://mde.tw/cp2020/content/scissor-rock-paper.html">http://mde.tw/cp2020/content/scissor-rock-paper.html</a><span> </span>(<a href="https://scissor-rock-paper.herokuapp.com/">https://scissor-rock-paper.herokuapp.com</a>)</h6>
<h6><a href="https://github.com/mdecourse/scissor-rock-paper2">https://github.com/mdecourse/scissor-rock-paper2</a><span> </span>(<a href="https://scissor-rock-paper2.herokuapp.com/">https://scissor-rock-paper2.herokuapp.com/</a>)</h6>
<h6><a href="http://mde.tw/wcm2021/downloads/heroku.pdf">heroku.pdf</a></h6>
<h6><a href="http://mde.tw/wcm2021/downloads/2017_web_apps.pdf">2017_web_apps.pdf</a></h6>
<h6><a href="https://assets.ubuntu.com/v1/f954307f-ubuntu-server-guide.pdf">Ubuntu server 參考教材</a>.</h6>
<h6><a href="http://mde.tw/wcm2021/content/Topic%200.html">Topic 0</a><span> </span>已經列出兩組可以從學校教務主機擷取資料的程式, 分別可以根據學期代號與班級代號取出班級排課表, 還有利用學期代號與實習實驗室代號擷取排客時間表.</h6>
<h6>接下來實習的目標是希望寫一組程式可以擷取機械設計工程系各實習實驗室排課表, 並且統計各實驗室每週排課總時數.</h6>
<h6>我們先來看<span> </span><a href="https://requests.readthedocs.io/en/master/">Python requests</a><span> </span>的用法:</h6>
<h6>W5_requests_ex1.py</h6>
<div class="syntaxhighlighter py" id="highlighter_957751">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
<div class="line number2 index1 alt1">2</div>
<div class="line number3 index2 alt2">3</div>
<div class="line number4 index3 alt1">4</div>
<div class="line number5 index4 alt2">5</div>
<div class="line number6 index5 alt1">6</div>
<div class="line number7 index6 alt2">7</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="py keyword">import</code> <code class="py plain">requests</code></div>
<div class="line number2 index1 alt1"> </div>
<div class="line number3 index2 alt2"><code class="py plain">r </code><code class="py keyword">=</code> <code class="py plain">requests.get(</code><code class="py string">"https://mde.tw"</code><code class="py plain">)</code></div>
<div class="line number4 index3 alt1"><code class="py functions">print</code><code class="py plain">(</code><code class="py string">"status_code:"</code><code class="py plain">, r.status_code)</code></div>
<div class="line number5 index4 alt2"><code class="py functions">print</code><code class="py plain">(</code><code class="py string">"content-type:"</code><code class="py plain">, r.headers[</code><code class="py string">'content-type'</code><code class="py plain">])</code></div>
<div class="line number6 index5 alt1"><code class="py functions">print</code><code class="py plain">(</code><code class="py string">"encoding:"</code><code class="py plain">, r.encoding)</code></div>
<div class="line number7 index6 alt2"><code class="py functions">print</code><code class="py plain">(</code><code class="py string">"text:"</code><code class="py plain">, r.text)</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
<h6>要看懂下列程式, 必須知道何謂<span> </span><a href="https://developer.mozilla.org/en-US/docs/Glossary/Entity">html entity</a>, 而且要會使用 requests.post() 與 bs4.BeautifulSoup()</h6>
<div class="syntaxhighlighter py" id="highlighter_245632">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
<div class="line number2 index1 alt1">2</div>
<div class="line number3 index2 alt2">3</div>
<div class="line number4 index3 alt1">4</div>
<div class="line number5 index4 alt2">5</div>
<div class="line number6 index5 alt1">6</div>
<div class="line number7 index6 alt2">7</div>
<div class="line number8 index7 alt1">8</div>
<div class="line number9 index8 alt2">9</div>
<div class="line number10 index9 alt1">10</div>
<div class="line number11 index10 alt2">11</div>
<div class="line number12 index11 alt1">12</div>
<div class="line number13 index12 alt2">13</div>
<div class="line number14 index13 alt1">14</div>
<div class="line number15 index14 alt2">15</div>
<div class="line number16 index15 alt1">16</div>
<div class="line number17 index16 alt2">17</div>
<div class="line number18 index17 alt1">18</div>
<div class="line number19 index18 alt2">19</div>
<div class="line number20 index19 alt1">20</div>
<div class="line number21 index20 alt2">21</div>
<div class="line number22 index21 alt1">22</div>
<div class="line number23 index22 alt2">23</div>
<div class="line number24 index23 alt1">24</div>
<div class="line number25 index24 alt2">25</div>
<div class="line number26 index25 alt1">26</div>
<div class="line number27 index26 alt2">27</div>
<div class="line number28 index27 alt1">28</div>
<div class="line number29 index28 alt2">29</div>
<div class="line number30 index29 alt1">30</div>
<div class="line number31 index30 alt2">31</div>
<div class="line number32 index31 alt1">32</div>
<div class="line number33 index32 alt2">33</div>
<div class="line number34 index33 alt1">34</div>
<div class="line number35 index34 alt2">35</div>
<div class="line number36 index35 alt1">36</div>
<div class="line number37 index36 alt2">37</div>
<div class="line number38 index37 alt1">38</div>
<div class="line number39 index38 alt2">39</div>
<div class="line number40 index39 alt1">40</div>
<div class="line number41 index40 alt2">41</div>
<div class="line number42 index41 alt1">42</div>
<div class="line number43 index42 alt2">43</div>
<div class="line number44 index43 alt1">44</div>
<div class="line number45 index44 alt2">45</div>
<div class="line number46 index45 alt1">46</div>
<div class="line number47 index46 alt2">47</div>
<div class="line number48 index47 alt1">48</div>
<div class="line number49 index48 alt2">49</div>
<div class="line number50 index49 alt1">50</div>
<div class="line number51 index50 alt2">51</div>
<div class="line number52 index51 alt1">52</div>
<div class="line number53 index52 alt2">53</div>
<div class="line number54 index53 alt1">54</div>
<div class="line number55 index54 alt2">55</div>
<div class="line number56 index55 alt1">56</div>
<div class="line number57 index56 alt2">57</div>
<div class="line number58 index57 alt1">58</div>
<div class="line number59 index58 alt2">59</div>
<div class="line number60 index59 alt1">60</div>
<div class="line number61 index60 alt2">61</div>
<div class="line number62 index61 alt1">62</div>
<div class="line number63 index62 alt2">63</div>
<div class="line number64 index63 alt1">64</div>
<div class="line number65 index64 alt2">65</div>
<div class="line number66 index65 alt1">66</div>
<div class="line number67 index66 alt2">67</div>
<div class="line number68 index67 alt1">68</div>
<div class="line number69 index68 alt2">69</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="py keyword">import</code> <code class="py plain">requests</code></div>
<div class="line number2 index1 alt1"><code class="py keyword">import</code> <code class="py plain">bs4</code></div>
<div class="line number3 index2 alt2"><code class="py comments"># for os.environ and os.system()</code></div>
<div class="line number4 index3 alt1"><code class="py keyword">import</code> <code class="py plain">os</code></div>
<div class="line number5 index4 alt2"><code class="py comments"># for geting html file path</code></div>
<div class="line number6 index5 alt1"><code class="py keyword">import</code> <code class="py plain">pathlib</code></div>
<div class="line number7 index6 alt2"><code class="py spaces"> </code> </div>
<div class="line number8 index7 alt1"><code class="py comments"># for pythn 3.9</code></div>
<div class="line number9 index8 alt2"><code class="py plain">proxy </code><code class="py keyword">=</code> <code class="py string">'http://[2001:288:6004:17::69]:3128'</code></div>
<div class="line number10 index9 alt1"><code class="py spaces"> </code> </div>
<div class="line number11 index10 alt2"><code class="py plain">os.environ[</code><code class="py string">'http_proxy'</code><code class="py plain">] </code><code class="py keyword">=</code> <code class="py plain">proxy </code></div>
<div class="line number12 index11 alt1"><code class="py plain">os.environ[</code><code class="py string">'HTTP_PROXY'</code><code class="py plain">] </code><code class="py keyword">=</code> <code class="py plain">proxy</code></div>
<div class="line number13 index12 alt2"><code class="py plain">os.environ[</code><code class="py string">'https_proxy'</code><code class="py plain">] </code><code class="py keyword">=</code> <code class="py plain">proxy</code></div>
<div class="line number14 index13 alt1"><code class="py plain">os.environ[</code><code class="py string">'HTTPS_PROXY'</code><code class="py plain">] </code><code class="py keyword">=</code> <code class="py plain">proxy</code></div>
<div class="line number15 index14 alt2"><code class="py spaces"> </code> </div>
<div class="line number16 index15 alt1"><code class="py comments">'''</code></div>
<div class="line number17 index16 alt2"><code class="py comments">url:  'class_ajax.php',</code></div>
<div class="line number18 index17 alt1"><code class="py comments">data: { pselyr: pselyr, pselclss: pselclss</code></div>
<div class="line number19 index18 alt2"><code class="py comments">'''</code></div>
<div class="line number20 index19 alt1"><code class="py plain">semester </code><code class="py keyword">=</code> <code class="py string">'1092'</code></div>
<div class="line number21 index20 alt2"><code class="py plain">classno </code><code class="py keyword">=</code> <code class="py string">'42311'</code></div>
<div class="line number22 index21 alt1"><code class="py plain">column </code><code class="py keyword">=</code> <code class="py color1">True</code></div>
<div class="line number23 index22 alt2"><code class="py spaces"> </code> </div>
<div class="line number24 index23 alt1"><code class="py keyword">if</code> <code class="py plain">semester </code><code class="py keyword">=</code><code class="py keyword">=</code> <code class="py color1">None</code><code class="py plain">:</code></div>
<div class="line number25 index24 alt2"><code class="py spaces">    </code><code class="py plain">semester </code><code class="py keyword">=</code> <code class="py string">'1091'</code></div>
<div class="line number26 index25 alt1"><code class="py keyword">if</code> <code class="py plain">classno </code><code class="py keyword">=</code><code class="py keyword">=</code> <code class="py color1">None</code><code class="py plain">:</code></div>
<div class="line number27 index26 alt2"><code class="py spaces">    </code><code class="py comments"># 42311 is 設一甲</code></div>
<div class="line number28 index27 alt1"><code class="py spaces">    </code><code class="py plain">classno </code><code class="py keyword">=</code> <code class="py string">'42311'</code></div>
<div class="line number29 index28 alt2"><code class="py spaces">     </code> </div>
<div class="line number30 index29 alt1"><code class="py plain">headers </code><code class="py keyword">=</code> <code class="py plain">{</code><code class="py string">'X-Requested-With'</code><code class="py plain">: </code><code class="py string">'XMLHttpRequest'</code><code class="py plain">}</code></div>
<div class="line number31 index30 alt2"><code class="py spaces"> </code> </div>
<div class="line number32 index31 alt1"><code class="py plain">url </code><code class="py keyword">=</code> <code class="py string">'https://qry.nfu.edu.tw/class_ajax.php'</code></div>
<div class="line number33 index32 alt2"><code class="py plain">post_var </code><code class="py keyword">=</code> <code class="py plain">{</code><code class="py string">'pselyr'</code><code class="py plain">: semester, </code><code class="py string">'pselclss'</code><code class="py plain">: classno}</code></div>
<div class="line number34 index33 alt1"><code class="py spaces"> </code> </div>
<div class="line number35 index34 alt2"><code class="py plain">result </code><code class="py keyword">=</code> <code class="py plain">requests.post(url, data </code><code class="py keyword">=</code> <code class="py plain">post_var, headers </code><code class="py keyword">=</code> <code class="py plain">headers)</code></div>
<div class="line number36 index35 alt1"><code class="py spaces"> </code> </div>
<div class="line number37 index36 alt2"><code class="py comments"># result.content 傳回 binary 資料</code></div>
<div class="line number38 index37 alt1"><code class="py comments"># soup = bs4.BeautifulSoup(result.content, 'lxml')</code></div>
<div class="line number39 index38 alt2"><code class="py comments"># result.text 傳回純文字資料</code></div>
<div class="line number40 index39 alt1"><code class="py plain">soup </code><code class="py keyword">=</code> <code class="py plain">bs4.BeautifulSoup(result.text, </code><code class="py string">'lxml'</code><code class="py plain">)</code></div>
<div class="line number41 index40 alt2"><code class="py spaces"> </code> </div>
<div class="line number42 index41 alt1"><code class="py comments"># 先除掉所有 anchor</code></div>
<div class="line number43 index42 alt2"><code class="py keyword">for</code> <code class="py plain">a </code><code class="py keyword">in</code> <code class="py plain">soup.findAll(</code><code class="py string">'a'</code><code class="py plain">):</code></div>
<div class="line number44 index43 alt1"><code class="py spaces">    </code><code class="py comments"># bs3 語法</code></div>
<div class="line number45 index44 alt2"><code class="py spaces">    </code><code class="py comments">#a.replaceWithChildren()</code></div>
<div class="line number46 index45 alt1"><code class="py spaces">    </code><code class="py comments"># bs4 語法, 將標註與內容拆開</code></div>
<div class="line number47 index46 alt2"><code class="py spaces">    </code><code class="py plain">a.unwrap()</code></div>
<div class="line number48 index47 alt1"><code class="py spaces"> </code> </div>
<div class="line number49 index48 alt2"><code class="py comments"># 根據輸出設定, 取出 class='tbcls' 的 table 資料</code></div>
<div class="line number50 index49 alt1"><code class="py plain">table </code><code class="py keyword">=</code> <code class="py plain">soup.find(</code><code class="py string">'table'</code><code class="py plain">, {</code><code class="py string">'class'</code><code class="py plain">: </code><code class="py string">'tbcls'</code><code class="py plain">})</code></div>
<div class="line number51 index50 alt2"><code class="py spaces"> </code> </div>
<div class="line number52 index51 alt1"><code class="py comments"># 重建 table, 設定邊線為 1 pixel</code></div>
<div class="line number53 index52 alt2"><code class="py plain">output </code><code class="py keyword">=</code> <code class="py string">"&lt;table border='1'&gt;"</code></div>
<div class="line number54 index53 alt1"><code class="py spaces"> </code> </div>
<div class="line number55 index54 alt2"><code class="py keyword">for</code> <code class="py plain">i </code><code class="py keyword">in</code> <code class="py plain">table.contents:</code></div>
<div class="line number56 index55 alt1"><code class="py spaces">    </code><code class="py comments"># 利用 replace 復原  </code></div>
<div class="line number57 index56 alt2"><code class="py spaces">    </code><code class="py comments"># https://www.w3schools.com/html/html_entities.asp</code></div>
<div class="line number58 index57 alt1"><code class="py spaces">    </code><code class="py comments"># https://developer.mozilla.org/en-US/docs/Glossary/Entity</code></div>
<div class="line number59 index58 alt2"><code class="py spaces">    </code><code class="py plain">output </code><code class="py keyword">+</code><code class="py keyword">=</code> <code class="py functions">str</code><code class="py plain">(i).replace(</code><code class="py string">"&amp;amp;nbsp"</code><code class="py plain">, </code><code class="py string">" "</code><code class="py plain">)</code></div>
<div class="line number60 index59 alt1"><code class="py plain">output </code><code class="py keyword">+</code><code class="py keyword">=</code> <code class="py string">"&lt;/table&gt;"</code></div>
<div class="line number61 index60 alt2"><code class="py comments"># print(output)</code></div>
<div class="line number62 index61 alt1"><code class="py comments"># 將 output 寫入 w1_class_local.html</code></div>
<div class="line number63 index62 alt2"><code class="py plain">with </code><code class="py functions">open</code><code class="py plain">(</code><code class="py string">"w1_class_local.html"</code><code class="py plain">, </code><code class="py string">"w"</code><code class="py plain">, encoding</code><code class="py keyword">=</code><code class="py string">"utf-8"</code><code class="py plain">) as </code><code class="py functions">file</code><code class="py plain">:</code></div>
<div class="line number64 index63 alt1"><code class="py spaces">    </code><code class="py functions">file</code><code class="py plain">.write(output)</code></div>
<div class="line number65 index64 alt2"><code class="py comments"># 利用 os.system() 以 default browser 開啟 w1_class_local.html</code></div>
<div class="line number66 index65 alt1"><code class="py plain">filePath </code><code class="py keyword">=</code> <code class="py plain">pathlib.Path(__file__).parent.absolute()</code></div>
<div class="line number67 index66 alt2"><code class="py comments">#print(filePath)</code></div>
<div class="line number68 index67 alt1"><code class="py comments"># set firefox as default browser and start url to open html file</code></div>
<div class="line number69 index68 alt2"><code class="py plain">os.system(</code><code class="py string">"start file:///"</code> <code class="py keyword">+</code> <code class="py functions">str</code><code class="py plain">(filePath) </code><code class="py keyword">+</code> <code class="py string">"\\w1_class_local.html"</code><code class="py plain">)</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
<h6>以上在 CMSMDE 列出程式碼, 有一個技巧, 針對<span> </span><a href="https://developer.mozilla.org/en-US/docs/Glossary/Entity">Html entity</a><span> </span>符號必須將 &amp; 表示為 &amp;amp; 否則在頁面程式引用時無法正確顯示出原始碼內容.</h6>
<h6>Flask example:</h6>
<div>
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
<div class="line number2 index1 alt1">2</div>
<div class="line number3 index2 alt2">3</div>
<div class="line number4 index3 alt1">4</div>
<div class="line number5 index4 alt2">5</div>
<div class="line number6 index5 alt1">6</div>
<div class="line number7 index6 alt2">7</div>
<div class="line number8 index7 alt1">8</div>
<div class="line number9 index8 alt2">9</div>
<div class="line number10 index9 alt1">10</div>
<div class="line number11 index10 alt2">11</div>
<div class="line number12 index11 alt1">12</div>
<div class="line number13 index12 alt2">13</div>
<div class="line number14 index13 alt1">14</div>
<div class="line number15 index14 alt2">15</div>
<div class="line number16 index15 alt1">16</div>
<div class="line number17 index16 alt2">17</div>
<div class="line number18 index17 alt1">18</div>
<div class="line number19 index18 alt2">19</div>
<div class="line number20 index19 alt1">20</div>
<div class="line number21 index20 alt2">21</div>
<div class="line number22 index21 alt1">22</div>
<div class="line number23 index22 alt2">23</div>
<div class="line number24 index23 alt1">24</div>
<div class="line number25 index24 alt2">25</div>
<div class="line number26 index25 alt1">26</div>
<div class="line number27 index26 alt2">27</div>
<div class="line number28 index27 alt1">28</div>
<div class="line number29 index28 alt2">29</div>
<div class="line number30 index29 alt1">30</div>
<div class="line number31 index30 alt2">31</div>
<div class="line number32 index31 alt1">32</div>
<div class="line number33 index32 alt2">33</div>
<div class="line number34 index33 alt1">34</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="py keyword">from</code> <code class="py plain">flask </code><code class="py keyword">import</code> <code class="py plain">Flask, request</code></div>
<div class="line number2 index1 alt1"><code class="py keyword">from</code> <code class="py plain">datetime </code><code class="py keyword">import</code> <code class="py plain">datetime</code></div>
<div class="line number3 index2 alt2"><code class="py keyword">import</code> <code class="py plain">os</code></div>
<div class="line number4 index3 alt1"> </div>
<div class="line number5 index4 alt2"><code class="py comments"># for pythn 3.9</code></div>
<div class="line number6 index5 alt1"><code class="py plain">proxy </code><code class="py keyword">=</code> <code class="py string">'http://[2001:288:6004:17::69]:3128'</code></div>
<div class="line number7 index6 alt2"><code class="py comments">''' </code></div>
<div class="line number8 index7 alt1"><code class="py comments">os.environ['http_proxy'] = proxy </code></div>
<div class="line number9 index8 alt2"><code class="py comments">os.environ['HTTP_PROXY'] = proxy</code></div>
<div class="line number10 index9 alt1"><code class="py comments">os.environ['https_proxy'] = proxy</code></div>
<div class="line number11 index10 alt2"><code class="py comments">os.environ['HTTPS_PROXY'] = proxy</code></div>
<div class="line number12 index11 alt1"><code class="py comments">'''</code></div>
<div class="line number13 index12 alt2"><code class="py plain">app </code><code class="py keyword">=</code> <code class="py plain">Flask(__name__)</code></div>
<div class="line number14 index13 alt1"> </div>
<div class="line number15 index14 alt2"><code class="py comments"># https://realpython.com/primer-on-python-decorators/</code></div>
<div class="line number16 index15 alt1"><code class="py decorator">@app</code><code class="py plain">.route(</code><code class="py string">'/'</code><code class="py plain">)</code></div>
<div class="line number17 index16 alt2"><code class="py keyword">def</code> <code class="py plain">hello():</code></div>
<div class="line number18 index17 alt1"><code class="py spaces">    </code><code class="py comments"># 若取不到 name 則 name = None</code></div>
<div class="line number19 index18 alt2"><code class="py spaces">    </code><code class="py plain">name </code><code class="py keyword">=</code> <code class="py plain">request.args.get(</code><code class="py string">'name'</code><code class="py plain">)</code></div>
<div class="line number20 index19 alt1"><code class="py spaces">    </code><code class="py keyword">if</code> <code class="py plain">name </code><code class="py keyword">=</code><code class="py keyword">=</code> <code class="py color1">None</code><code class="py plain">:</code></div>
<div class="line number21 index20 alt2"><code class="py spaces">        </code><code class="py plain">name </code><code class="py keyword">=</code> <code class="py string">"test"</code></div>
<div class="line number22 index21 alt1"><code class="py spaces">    </code><code class="py comments"># https://realpython.com/python-formatted-output/</code></div>
<div class="line number23 index22 alt2"><code class="py spaces">    </code><code class="py keyword">return</code> <code class="py plain">HELLO_HTML.</code><code class="py functions">format</code><code class="py plain">(</code></div>
<div class="line number24 index23 alt1"><code class="py spaces">            </code><code class="py plain">name, </code><code class="py functions">str</code><code class="py plain">(datetime.now()))</code></div>
<div class="line number25 index24 alt2"> </div>
<div class="line number26 index25 alt1"><code class="py plain">HELLO_HTML </code><code class="py keyword">=</code> <code class="py comments">"""</code></div>
<div class="line number27 index26 alt2"><code class="py spaces">    </code><code class="py comments">&lt;html&gt;&lt;body&gt;</code></div>
<div class="line number28 index27 alt1"><code class="py spaces">        </code><code class="py comments">&lt;h1&gt;Hello, {0}!&lt;/h1&gt;</code></div>
<div class="line number29 index28 alt2"><code class="py spaces">        </code><code class="py comments">現在時間為: {1}.</code></div>
<div class="line number30 index29 alt1"><code class="py spaces">    </code><code class="py comments">&lt;/body&gt;&lt;/html&gt;"""</code></div>
<div class="line number31 index30 alt2"> </div>
<div class="line number32 index31 alt1"><code class="py keyword">if</code> <code class="py plain">__name__ </code><code class="py keyword">=</code><code class="py keyword">=</code> <code class="py string">"__main__"</code><code class="py plain">:</code></div>
<div class="line number33 index32 alt2"><code class="py spaces">    </code><code class="py comments"># Launch the Flask dev server</code></div>
<div class="line number34 index33 alt1"><code class="py spaces">    </code><code class="py plain">app.run(host</code><code class="py keyword">=</code><code class="py string">"localhost"</code><code class="py plain">, debug</code><code class="py keyword">=</code><code class="py color1">True</code><code class="py plain">)</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
<h3>開放教科書</h3>
<h6><a href="https://www.openculture.com/free_textbooks">https://www.openculture.com/free_textbooks</a><span> </span>(K-12)</h6>
<h6><a href="https://openstax.org/subjects">https://openstax.org/subjects</a><span> </span>(University)</h6>
<h6></h6>
<h6>透過理論分析與模擬進行產品設計:</h6>
<h6><a href="https://github.com/OpenFOAM">https://github.com/OpenFOAM</a></h6>
<h6>有限元素分析法教科書:<span> </span><a href="http://web.mit.edu/kjb/www/Books/FEP_2nd_Edition_4th_Printing.pdf">http://web.mit.edu/kjb/www/Books/FEP_2nd_Edition_4th_Printing.pdf</a></h6>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" data-mce-fragment="1" frameborder="0" height="315" src="https://www.youtube.com/embed/kGJ8fKWfWU8" title="YouTube video player" width="560"></iframe></p><h2>w7</h2>
<h4>Heroku-實作</h4>
<p><span>步驟一:</span><span> </span>(<span>建立 Heroku 帳號</span>) 進入<span> </span><a href="https://heroku.com/">https://heroku.com</a>, 利用學校配發的 @gm 登記一個 Heroku 帳號, 關鍵在於密碼設定必須要至少 8 個字元, 且字元中必須包含符號, 英文字母及數字,  並且登記後要進入 @gm 帳號進行確認後才能開通 Heroku 帳號.</p>
<p>完成帳號登記後, 必須知道目前 Heroku 只允許免費建立五個應用程式, 且每個程式的最大容量為 500MB.</p>
<p><span>步驟二:</span><span> </span>(<span>建立 Heroku app</span>) 登入 Heroku 後, 先以 s + 學號 建立第一個 app, 完成後, 將可至 https://s學號.herokuapp.com 連線取得網站最初內容.</p>
<p><span>步驟三:</span><span> </span>(下載 Heroku CLI) 從<span> </span><a href="http://a.kmol.info:88/heroku.7z">http://a.kmol.info:88/heroku.7z</a><span> </span>下載 Heroku cli 程式檔案, 解開至隨身碟 Y: 所在位置或者是 Hybrid 設定的位置.</p>
<p><span>步驟四:</span><span> </span>(<span>修改命令搜尋路徑</span>) 修改隨身系統的啟動批次檔案, 讓 Windows 的命令視窗中可以執行 heroku.exe, 或者稱作"設法將 heroku.exe 所在目錄位置, 設為 Windows 搜尋路徑之一".</p>
<p>重新啟動已經納入可執行 heroku.exe 的隨身碟 start_ipv6.bat 或 start_ipv4.bat</p>
<p><span>步驟五:</span><span> </span>(<span>測試 heroku 執行</span>) 測試是否能夠在修改後的命令列中執行 heroku.exe, 輸入 heroku version 若回應所使用的版本表示上述路徑設定已經成功.</p>
<p><span>步驟六:</span><span> </span>(<span>設定 heroku 代理主機</span>) 先前我們已經知道網路的應用包含 client 與 server, 不同 client 採用不同的 proxy 設定與 server 連線, 其中 firefox 作為 WWW 網路協定的 client, 有其自己的網路 Proxy 設定, 也可以直接使用操作系統的 Proxy 設定.</p>
<p>Chrome 作為 WWW 網路協定的 client, 目前 Windows 下的最新版, 只能使用操作系統的 Proxy 設定.</p>
<p>而 git 作為 git client 與 github server 連線的 Proxy 設定, 則寫在 y:\home_ipv6 下的 .giconfig 中,  以 git config --global http.proxy "http://your_proxy:port" 進行設定.</p>
<p>相同的道理 heroku cli 作為<span> </span><a href="https://heroku.com/">https://heroku.com</a><span> </span>伺服器的 client 端, 也有其 Proxy 的設定方式, 也就是在 start_ipv6.bat 中加入:</p>
<div>
<div class="syntaxhighlighter js" id="highlighter_823628">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
<div class="line number2 index1 alt1">2</div>
<div class="line number3 index2 alt2">3</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="js plain">REM </code><code class="js keyword">for</code> <code class="js plain">heroku login</code></div>
<div class="line number2 index1 alt1"><code class="js plain">set HTTP_PROXY=http:</code><code class="js comments">//[2001:288:6004:17::53]:3128</code></div>
<div class="line number3 index2 alt2"><code class="js plain">set HTTPS_PROXY=http:</code><code class="js comments">//[2001:288:6004:17::53]:3128</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p><span>步驟七:</span><span> </span>(<span>設定同步倉儲</span>) 針對利用 Heroku 同步 Github Pages 上的網站內容, 只需要透過 git remote add (Heroku 指令為 heroku git:remote -a heroku_倉儲_名稱, 之後只要在 heroku login 狀態下, 可以直接利用 git push) 在近端設定一個連線到 Heroku 倉儲的代號, 就能在每次更新 Github Pages 倉儲後, 再將內容同步至 Heroku. 網際內容管理課程將使用兩種 Heroku app 設定, 也就是靜態網頁與動態網頁:</p>
<p>靜態網頁 - 採用 php 方式部署, 讓 Heroku 將靜態網頁視為 PHP 程式, 利用 index.php 跳轉到 index.html</p>
<p>動態網頁 - 讓 Heroku 執行 cmsimde/wsgi.py 的方式進行雲端伺服.</p>
<p><span>步驟八:</span><span> </span>(<span>以 git 進行提交推送</span>) 利用 heroku git:remote -a 設定的同步倉儲其推送名稱內定為 "heroku", 使用者只要使用 git push heroku 就可以將改版內容推送到對應的 Heroku app 倉儲.</p>
<p>指令操作步驟:</p>
<div>
<div class="syntaxhighlighter py" id="highlighter_175534">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
<div class="line number2 index1 alt1">2</div>
<div class="line number3 index2 alt2">3</div>
<div class="line number4 index3 alt1">4</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="py comments"># 以 interactive 模式登入 Heroku, 完成後產生 y:\home_ipv6\_netrc</code></div>
<div class="line number2 index1 alt1"><code class="py plain">heroku login </code><code class="py keyword">-</code><code class="py plain">i</code></div>
<div class="line number3 index2 alt2"><code class="py comments"># 針對已經登入的 Heroku 帳號下的 taiwan-01 app, 設為此倉儲的 remote 同步倉儲, 且在倉儲中會自建名稱為 heroku 的 remoate site.</code></div>
<div class="line number4 index3 alt1"><code class="py plain">heroku git:remote </code><code class="py keyword">-</code><code class="py plain">a taiwan</code><code class="py keyword">-</code><code class="py plain">no1</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p>上述步驟完成後的 Heroku 網站:<span> </span><a href="https://taiwan-no1.herokuapp.com/">https://taiwan-no1.herokuapp.com</a></p>