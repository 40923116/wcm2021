var tipuesearch = {"pages": [{'title': 'About', 'text': 'Repository:  https://github.com/mdecourse/cmstemplate \n Github Pages:  https://mde.tw/cmstemplate \n 利用 cmstemplate 建立以 CMSiMDE 作為子模組的動態與靜態網站方法為: \n \n 登入 Github 帳號 \n 將瀏覽器指向  https://github.com/mdecourse/cmstemplate \n 利用  Use this template  按鈕建立倉儲 \n \n clone 帶有 CMSiMDE 的指令: \n git clone --recurse-submodules URL \n 上述 URL 即為希望將倉儲資料取下進行改版的 Github 倉儲網路統一資源位置, 也就是 Github 倉儲網址. \n 每一個以 cmstemplate 為 template 的倉儲, 其根目錄都帶有: \n \n init.py  - 其中的 site_title, ip 與 port 可以讓使用者自行修改, site_title 是網站標題, ip 為動態網站啟動時所使用的網路位址, 可設為內部或外部 IPv4 (IPv6), port 則是動態網站啟動時所佔用的埠號. \n http-server.py  - 執行後會使用內建的 localhost 與 port 8444 伺服 content 子目錄中的 CMSiMDE 靜態網頁. \n cms.bat  - 讓使用者執行動態網站用的批次檔案. \n acp.bat  - 若使用者已經將倉儲設為 ssh 連線, 且提供遠端與近端的認證模式, 則可以在執行此批次指令之後加上提交字串, 即可執行 git add ., git commit -m "提交訊息", 以及 git push 等三個指令. \n \n', 'tags': '', 'url': 'About.html'}, {'title': 'CMSiMDE', 'text': 'CMSiMDE ( https://github.com/mdecourse/cmsimde ) 是一套以 Python 與 Flask 框架編寫的網際內容管理系統, \n 使用 CMSiMDE 建議使用者安裝 flask flask_cors bs4 lxml pelican markdown leo 等模組. 其中的 flask flask_cors bs4 lxml pelican markdown為啟動 CMSiMDE 的必要模組, 而 leo 則是 CMSMDE 開發者所使用的大綱管理工具, 可以用於與 CMSiMDE 整合的 Pelican blog 及 Reveal.js 網際簡報編輯之用. \n', 'tags': '', 'url': 'CMSiMDE.html'}, {'title': '基本操作', 'text': '當使用者利用 cms.bat 啟用動態網站後, 即可利用瀏覽器  https://localhost:9443  在近端維護網站內容, 由於此時動態網站僅在 localhost 啟動, 因此可以使用內建的管理者密碼 "admin" 登入管理網站內容. \n 假如使用者修改 init.py 中的 ip 或 uwsgi 設定, 讓動態網站在外部 IP 啟動, 則必須自行透過動態網站中的  config  指令修改管理者密碼. \n 動態網站編輯表單中的  config  除了可更改網站管理者密碼外, 也可以更改網站的頁面內容標題 (外部標題可以透過 init.py 中的 site_title 更改). \n', 'tags': '', 'url': '基本操作.html'}, {'title': '編輯網頁內容', 'text': '編輯 CMSiMDE 動態網站中的內容, 可以透過表單中的  Edit All  或  Edit  按鈕進行.  Edit  可用於單頁編輯, 操作時先選擇左側的頁面標題, 等系統顯示該頁面內容後, 再點擊上方的  Edit  按鈕即可進入該頁面的編輯模式. \n Edit All  通常用於單次刪除所有頁面內容或者只保留特定頁面用, 點擊後會將所有頁面內容置於編輯器中. \n', 'tags': '', 'url': '編輯網頁內容.html'}, {'title': '上傳與引用檔案', 'text': 'File Upload  可以讓使用者選擇近端多個檔案上傳至動態系統中的 downloads 目錄. \n 引用使用者上傳的檔案 \n python_book_01.pdf \n', 'tags': '', 'url': '上傳與引用檔案.html'}, {'title': '上傳與引用圖片', 'text': 'Image Upload  可以讓使用者選擇近端多個檔案上傳至動態系統中的 downloads 目錄. \n 引用使用者上傳的檔案 \n \n \n', 'tags': '', 'url': '上傳與引用圖片.html'}, {'title': '嵌入程式碼', 'text': '利用 Insert/Edit code 功能, 可以嵌入各種程式碼: \n // 下列 Dart 程式, 利用 Runge Kutta 迭代運算法, 解常微分方程式\n// 設 t 為時間, x 則設為物體的位移\n// dx / dt = (t - x)/2, 起始值 t0=0, x0=1, 求 t=2 時的 x 值\n//\n// 已知起始值 t0 與 x0 後, 可以利用下列 rungeKutta 函式, 以\n// h 為每步階增量值, 求 dxdt 常微分方程式任一 t 的對應值 x\n// 定義函式 rungeKutta, 共有四個輸入變數\nrungeKutta(t0, x0, t, h) {\n  // 利用步階增量值 h 與 t 的起始及終點值\n  // 計算需要迭代的次數 n\n  int n = ((t - t0) / h).toInt();\n  // 宣告 x 為雙浮點數, 且設為起始值 x0\n  double x = x0;\n  // 利用已知的 t0, x0, t 終點值與步階增量值 h, 迭代求 x 對應值\n  // 索引值 i 將每次增量 1, 從 i=1 執行 for 環圈至 i=n\n  for (int i = 1; i <= n; i++) {\n    // 將此階段的 t 與 x 值代入 dxdt 函式求下列四個浮點變數值\n    double k1 = h * dxdt(t0, x);\n    double k2 = h * dxdt(t0 + 0.5 * h, x + 0.5 * k1);\n    double k3 = h * dxdt(t0 + 0.5 * h, x + 0.5 * k2);\n    double k4 = h * dxdt(t0 + h, x + k3);\n    // 利用上述四個變數值求此步階增量後的對應 x 值\n    x = x + (1.0 / 6.0) * (k1 + 2 * k2 + 2 * k3 + k4);\n    // 每次 for 迴圈執行最後, 準備計算下一個步階增量後的 x 對應值\n    // t 起始值配合步階增量值 h, 進行增量\n    t0 = t0 + h;\n  }\n  // 完成 for 迴圈迭代後, 傳回與 t 終點值對應的 x 值\n  return x;\n}\n\n// 將微分方程式 "dx / dt = (t - x)/2" 定義為 dxdt 函式\ndxdt(t, x) {\n  return ((t - x) / 2);\n}\n\n// 定義 main() 主函式內容, 目的在利用 rungeKutta 函式\n// 解常微分方程式\nmain() {\n// Driver method\n// num 資料型別可以是整數或雙浮點數\n  num t0 = 0;\n  num x = 1;\n  num t = 2;\n  double h = 0.2;\n  print(\'The value of x at t=$t is: ${rungeKutta(t0, x, t, h)}\');\n}\n \n \n', 'tags': '', 'url': '嵌入程式碼.html'}, {'title': '嵌入影片檔', 'text': '直接利用 Source code 功能, 將影片檔案的 iframe 標註放入後存檔: \n \n', 'tags': '', 'url': '嵌入影片檔.html'}, {'title': '檢視 STL', 'text': '使用 Github 所提供的 STL viewer 嵌入 github.com/mdecourse/cmstemplate main branch 中 downloads 目錄中的 spikeball.stl \n <script src="https://embed.github.com/view/3d/mdecourse/cmstemplate/main/downloads/spikeball.stl"></script> \n 將上列 script 標註放入頁面 HTML 內容後, 可以檢視 STL 零件檔案. \n \n \n \n \n 以 CMSiMDE 內建的 static/viewstl.html 檢視 STL 檔案: \n 使用 iframe 其 src 指向 STL 檔案的絕對 URL 路徑: \n /static/viewstl.html?src=https://mde.tw/cmstemplate/downloads/spikeball.stl \n 就可以如下檢視 downloads/spikeball.stl \n \n', 'tags': '', 'url': '檢視 STL.html'}, {'title': 'Gitlab 同步', 'text': '利用 git remote add gitlab  https://gitlab.com/user/repository.git  可以在近端倉儲中的 .git/config 中新增一個名稱為 gitlab, 且與  https://gitlab.com/user/repository.git  倉儲對應的設定. 使用者可以將此倉儲改版內容以 git push gitlab 推向 Gitlab. \n 至於 Gitlab Pages 額外需要下列 .yml 檔案進行轉換設定: \n .gitlab-ci.yml \n pages:\n  stage: deploy\n  script:\n  - mkdir .public\n  - cp -r * .public\n  - mv .public public\n  artifacts:\n    paths:\n    - public\n  only:\n  - master\nvariables:\n  GIT_SUBMODULE_STRATEGY: recursive \n \n', 'tags': '', 'url': 'Gitlab 同步.html'}, {'title': 'Heroku 部署', 'text': '與 Heroku 部署有關資訊請參考:  https://mde.tw/cp2020/content/Heroku.html \n', 'tags': '', 'url': 'Heroku 部署.html'}, {'title': 'Fossil SCM', 'text': '在 Github 之外, 可以同步將各倉儲資料存放至 Gitlab, Heroku (有 500 MB 容量限制) 與 Fossil SCM. \n 希望整合 Github 與 Fossil SCM 倉儲步驟說明如下: \n 針對 Github 中已經有  https://github.com/mdecourse/cmstemplate  倉儲, 希望同步建  https://fossil.kmol.info/cmstemplate  與之內容同步. \n 登入 fossil.kmol.info 主機, 在 /home/user/repository 目錄中, 以 fossil init cmstemplate.fossil 建立空倉儲. 此時 Fossil SCM 將會列出以登入帳號作為帳號的管理者密碼. \n 管理者利用  https://fossil.kmol.info/cmstemplate  連結, 以 user 登入, 並利用上列管理者密碼進入管理區, 先行透過 Setup/users 變更 user 對應密碼. \n 回到 Windows 以  fossil clone https://user@fossil.kmol.info/cmstemplate cmstemplate.fossil  取下倉儲資料, 過程中將需要輸入與 user 對應的密碼, 並被詢問是否儲存密碼, 若選擇儲存密碼則隨後的 fossil commit 將回自動提交推送. \n 接著在近端必須開啟空 cmstemplate.fossil 倉儲, 主要目的是取得 __FOSSIL__, 並且以 git pull 完整拉下位於  https://github.com/mdecourse/cmstemplate  中的資料並與空 __FOSSIL__ 進行整合. 其中在 Fossil SCM 端必須將 Setup/Settings 中的 default-csp 設為:  https://fonts.googleapis.com  (讓 CMSiMDE 靜態網頁可以在 Fossil SCM doc 頁面中正常顯示), 且勾選 dotfiles (讓 Fossil SCM 可以儲存 .git 中的版本資料). \n \n 參考資料: \n 編譯 Fossil SCM: \n \xa0 http://project.mde.tw/blog/zai-msys2-huan-jing-bian-yi-fossil-scm.html \n', 'tags': '', 'url': 'Fossil SCM.html'}, {'title': '建立網頁', 'text': '由於 CMSiMDE 帶有動態網頁與靜態網頁等兩個部分, 動態網頁執行時需要該伺服器能夠執行 Python 3, 以及 flask flask_cors bs4 lxml pelican markdown 等模組. 而靜態網頁的伺服則只需要 WWW Server 即可. \n 若使用者在 Github 使用 CMSiMDE 建立網頁, 可以透過  https://github.com/mdecourse/cmstemplate  template 建立, 步驟與兩種設定方式如下: \n \n 使用者登入 Github \n 將瀏覽器連線至  https://github.com/mdecourse/cmstemplate  頁面後, 點擊 Use this template 按鈕後, 選擇所要採用的 repository 名稱後, 就可以建立以 CMSiMDE 作為子模組的 Github 倉儲. \n 假如使用者所選擇的倉儲名稱為: 帳號.github.io, 則 Github 會自動設定該倉儲的 main 分支為 Github Pages 根目錄, 意即一旦 Github Pages 完成轉檔 (提交訊息之後會出現綠勾), 則該倉儲的對應網頁將為: https://帳號.github.io \n 若使用利用  https://github.com/mdecourse/cmstemplate  作為 template 所建立的倉儲名稱並非 帳號.github.io, 則使用者必須自行至該倉儲的 settings/Github Pages 選項中將 main branch 設為 Github Pages 對應的 root 目錄. 之後, Github 將會採用: 帳號.github.io/倉儲名稱 作為與該倉儲對應的 Github Pages 網址. \n \n', 'tags': '', 'url': '建立網頁.html'}, {'title': '注意事項', 'text': '因為  https://github.com/mdecourse/cmstemplate  將 CMSiMDE 倉儲作為 submodule, 因此使用者利用 cmstemplate 作為 template 後, 必須使用 git clone --recurse-submodules 取下遠端倉儲. \n 例如: \n 若使用者的倉儲 URL 為  https://github.com/mdecourse/cmstemplate \n 則可以在近端利用: \n git clone --recurse-submodules  https://github.com/mdecourse/cmstemplate.git \n 將遠端倉儲資料存入 cmstemplate 目錄中. \n 目前的 cmstemplate 內建 cms.bat 與 acp.bat 等兩個 batch 檔案, 可以協助使用者直接在倉儲根目錄啟動 CMSiMDE 動態網頁, 以及單一指令式即可完成 git add, git commit 以及 git push, 但是前提是使用者必須設定以 ssh 方式與 Github 倉儲進行驗證. \n 例如: \n 若使用者已經將倉儲內容 clone 至近端, 且已經帶有 cmsimde 子模組的內容. \n 則可以在近端命令列進入 cmstemplate 倉儲目錄執行: \n cms.bat \n 開啟動態網頁系統. 並以  https://localhost:9443  開啟. \n 一旦完成動態網頁的編輯, 利用 Generate Pages 可以轉為靜態網站, 且各 html 檔案將位於 content 目錄中. \n 若使用者希望檢查近端靜態網頁的內容, 可以利用 SciTE 開啟倉儲中的 http-server.py, 並利用瀏覽器以  https://localhost:8444  檢查靜態網頁內容. \n 一旦使用者要將近端倉儲的動態與靜態網頁內容推向 Github, 則必須將倉儲中 .git/config 的 url, 從 https 改為 ssh 的連線格式: \n 例如: \n 原先 .git/config origin 的 url 為 url =  https://github.com/mdecourse/cmstemplate.git,  則必須改為: \n url =  git@github.com:mdecourse/cmstemplate.git \n 之後假如使用者要以 "add some files" 字串當作提交說明訊息, 則可以在命令列中的倉儲目錄執行: \n acp.bat "add some files" \n', 'tags': '', 'url': '注意事項.html'}, {'title': '標題選擇', 'text': '由於 CMSiMDE 中的動態網站透過 config/content.htm 的 H1~H3 超文件標註進行分頁, 因此使用者利用 cms.bat 開啟動態網站後, 必須注意各頁面標題文字的選擇: \n \n 頁面標題文字儘量簡短  - 頁面標題就有如文章的章節標題, 只要該標題具有該頁面內容的代表性即可, 越簡短越好. \n 頁面標題文字不要使用標點符號  - 因為標點符號中的 "/" 會造成頁面擷取時 URL 指令分段上的誤判, 至於標題文字中若有 ":" 則會在動態內容轉靜態內容時, 因 Windows 不允許檔案名稱帶有 ":" 而無法轉檔. \n 頁面標題中不可以有超文件標註  - 由於 CMSiMDE 動態網站編輯器採用 GUI 進行, 採用滑鼠標修頁面標題時, 可能無意中將 HTML 標註放入 H1~H3 標題文字中, 如此可能會造成 CMSiMDE 分頁錯誤而無法開啟動態網站. 當使用者要檢查所使用的頁面標題是否帶有 html 標註, 可以透過編輯功能中的 Source Code 檢查. \n H1 標題數量不可過多  - 由於 CMSiMDE 的靜態網站支援手機模式, 當頁面 H1 標題數量超過 10 個之後, 頁面標題可能無法在螢幕上最上方以一列顯示, 而是必須出現在第二行, 結果將會導致頁面展開時的 Javascript 程式產生錯亂, 結果為無法直接以滑鼠點擊進入特定頁面. \n \n \n \n', 'tags': '', 'url': '標題選擇.html'}, {'title': '靜態網頁 404', 'text': '當使用者將近端網頁倉儲資料推向 Github 後, commit 提交訊息之後若沒有出現綠勾, 表示靜態網頁無法轉檔成功, 這時連接靜態網頁時, 將會出現 404, 通常情況下是因為倉儲中 cmsimde 子模組的版次無法與遠端  https://github.com/mdecourse/cmsimde  中的版本對應. \n 上述靜態網頁出現 404 錯誤訊息的處理方式如下: \n \n 從  https://github.com/mdecourse/cmsimde  倉儲中複製最新版本的版次號, 以  2021/03/03 的版次 為例, 版次號為 1c3aeec1f5d26b421743d2f5ef8bb7d5b99292af, 使用者只需要最前面的 7 個字元, 也就是 1c3aeec. \n 然後在近端倉儲中, 以命令列進入 cmsimde 目錄後執行:  git checkout 1c3aeec \n 接著退回倉儲目錄, 以 git add, git commit 及 git push 將倉儲改版內容推向 Github 後應該就可以將倉儲正確轉為靜態網站內容. \n \n', 'tags': '', 'url': '靜態網頁 404.html'}, {'title': '動態網站錯誤', 'text': 'CMSiMDE 動態網站經常出現的錯誤是無法對 config/content.htm 分頁, 這時可以利用 SCiTE 編輯 content.htm, 找尋是否 H1~H3 標註中是否帶有特殊符號, 如 "/" 或 ":" 等. \n', 'tags': '', 'url': '動態網站錯誤.html'}, {'title': '延伸開發', 'text': '為了建立 responsive site: \n 靜態網頁: \n Javascript 程式庫: \n https://getbootstrap.com/ \n 動態系統: \n Javascript editor \n TinyMCE:  https://www.tiny.cloud/ \n Syntax highlighter:  https://prismjs.com/ \n Ajax bit by bit file uploader: \n Flask \n Flask_cors \n bs4 \n lxml \n markdown \n', 'tags': '', 'url': '延伸開發.html'}, {'title': '課程', 'text': '', 'tags': '', 'url': '課程.html'}, {'title': 'w6', 'text': '', 'tags': '', 'url': 'w6.html'}, {'title': 'w5', 'text': '各分組開始執行 W4-W9 的分組專案 (延續 \xa0 Topic0 \xa0 的程式開發), 並從下列台灣未來 10 年科技願景內容中, 確認此舉隸屬未來創新教育體系 ( 多元適性, 未來產業人才, 終身學習 ) 的一環. \n 創新教育體系下, 個人學習心態 (Mindset): \n \n 多元適性 - \xa0 自主知識 學習, 動手 實作驗證知識效用 , 發揮 個人特色 . ( 開放專業教材範例 ) \n 未來產業人才 - \xa0 數位化 多元環境下 ( 分散式版次管理 , \xa0 區塊鍊, AI ), 充分與產業發展及需求結合. ( Pro Git , \xa0 Blockchain , \xa0 AI ) \n 終身學習 - 以 敏捷 \xa0 (Agile) 及 彈性 \xa0 (Flexible) 學習, 適應未來科技與自然環境的變化. ( The Scrum Culture ) \n \n 還沒有啟用 SSH 對 Github 推送的學員, 請參考 \xa0 SSH 了沒 \xa0 中的說明, 儘快啟用. \n 一旦 Github session 設定完成, 可以從 [HKEY_CURRENT_USER\\SOFTWARE\\SimonTatham] 將 registry 設定匯出存為 y:\\my_github.reg, 並在 start_ipv6.bat 中以\xa0 regedit.exe /S y:\\my_github.reg 將設定匯入. \n 台灣 2030 科技願景: \n taiwan_2030_tech_vision.pdf \n 台灣2030—創新、包容、永續, 實現樂活社會、高值經濟、強韌環境、普惠科技、創新教育等五大目標. \n 鑒於IoT、AI 與區塊鏈等新科技應用越趨成熟，數位化轉型趨勢已然成形. \n \n 數位科技驅動的創新社會 - 產業創新, 跨域加乘, 勞動升級. \n 跨文化、族群、世代的多元包容社會 - 長幼安居, 青壯樂業, 族群多元. \n 循環再生、零污染、智慧強韌的永續社會 - 循環生態, 韌性家園. \n \n \n WCM2021 Programming Project: \n 目前的 \xa0 https://github.com/mdecourse/cmsimde \xa0 只提供將動態文件 config/content.htm 轉為 content 中各靜態頁面的功能, 為了能夠整理上述 CoppeliaSim 說明文件的轉換, 首先需要建立將 content 中各頁面, 設法集結為 config/content.htm 的功能, 而這項任務將列為 \xa0 https://mde.tw/wcm2021 \xa0 課程中的網際內容管理課程專案. \n 參考資料: \n http://mde.tw/cd2021/content/W5.html \n https://github.com/mdecourse/copsim/discussions/1 \n https://github.com/showdownjs/showdown \n https://github.com/cyberbotics/webots \n https://github.com/CoppeliaRobotics \n https://github.com/cyberbotics \n https://github.com/bulletphysics/bullet3/tree/master/examples/pybullet \n http://a.kmol.info:88/ \n', 'tags': '', 'url': 'w5.html'}, {'title': '創新教育', 'text': '創新教育有下列三項策略: \n \n \n 推動多元適性教育 \n \n \n 培育未來產業人才 \n \n \n 營造終身學習環境 \n \n \n \n \n \n 推動多元適性教育 \n 策略說明: \n 科技顛覆工作與就業所需的技能, 因此學齡教育更需要能夠按照學童的能力、興趣及需求, 提供 個人化的教學方式 , 並且創造公平學習機會, 強化學童 自主學習與動手實作 的動機, 朝向 深度知識學習 , 進而為未來社會與公民做出有意義的貢獻. \n 回應族群: \n 滿足學童自我探索知識且能深入理解內容的需求, 包含對於知識資訊、概念想法、實作技巧與直覺等, 並 建立同儕認同感, 以共同合作取代競爭 觀念; 提供橋接多元教育及升學途徑之認證體系, 緩減家長經濟負擔與學童學習壓力. \n 國際標竿: \n 愛沙尼亞推動 全面的數位科技教育應用 , 讓學生能充分獲得數位技能, 例如"ekool" 和 "Stuudium" 能協助教師與家長討論學童學習狀況和教學方法的平台, "電子書包(e-Scoolbag)" 提供數位教材, 如電子教科書、互動遊戲, 且能蒐集學習數據. \n 新加坡自 2019 年開始逐步 取消中小學考試 , 從傳統的菁英教育轉型為提供公平教育機會、培育未來人才的搖籃, 改為採用 " 課堂評估 " 瞭解學生學習狀況, 讓老師能以彈性的方式取代制式教學, 注重每一個學生個體的成長與發展. \n 建議推動方向: \n - 科技輔助自主深度學習 \n - 協助彌平城鄉數位落差 \n 2. 培育未來產業人才 \n 策略說明: \n 依據未來產業發展階段之可能需求, \xa0 培養數位人才 , 並縮短學用落差. 理解產業需求脈絡, 建置 數位化勞動技能地圖 , 以科技強化職場與技職教育連結, 讓 學歷、技能與資歷認證流程數位化 . 同時也應標靶式鎖定特定領域, 強化延攬與留住專業人才, 使人才供應更活化多元. \n 回應族群: \n 回應中壯年面對自動化科技持續演進趨勢下, 將被迫面臨專業或就業轉換的挑戰, 跨越技能落差, 破除求職障礙; 滿足青年族群預判職業發展所需具備技能, 強化教育與職場連結的人才培育; 滿足產業界對於高階人才(如科技、數位人才)的需求, 支持國內產業轉型. \n 國際標竿: \n 美國勞工部的生涯輔導網站 CareerOneStop, 提供整合職業生涯訊息的網路平台, 目的在於幫助求職者、學生、勞工、人資單位及雇主, 可以有效運用資源藉以達到自我發展, 並在新經濟環境下做出有效的決策. 更提供美國地區的未來就業預測, 針對不同教育程度提供未來 10 年就業的可能環境. \n 體驗新加坡 (Contact\xa0 Singapore) 計劃: 海內外共設有 9 個專門吸引外籍專業人士及海外學生的據點, 提供最新的就業規範及生活訊息. 透過寬鬆的專業人士移民政策、外籍專業人士稅賦優惠及親屬安置、個人化就業許可證、維持良好生活環境等, 提高人才駐留入籍的誘因. \n 建議推動方向: \n ‒創建 勞動與數位技能地圖 連結職場 \n ‒推動 目標導向 專業人才平台設置 \n 3. \xa0 營造終身學習環境 \n 策略說明: \n 協助建立終身學習平台, 可記錄實體和數位技能學習的進程與軌跡, 提供多元微課程的推薦服務, 能夠自主選擇培養興趣課程或累積培訓進修權利, 可輕鬆參與學習社群, 分享學習資源或合作實踐成果, 增加學習的持久性並促進社會參與. \n 回應族群: \n 滿足中高齡與高齡者終身學習與持續貢獻社會的需求, 提供能按自有學習經驗, 連結吸收新知的管道或加入學習社群; 同時, 也提供教育工作者研究及交流數位教學方法內容之設計, 協助教師社群應用數位工具, 發展創新的教學模式. \n 國際標竿: \n 新加坡終身學習及培訓帳戶 "SkillsFuture" 提供 25 歲以上的新加坡公民每年新加坡幣 500 元 (約新台幣一萬元) 的津貼, 讓 公民能夠選修超過 200 堂技能加值與進修課程 , 另外也提供額外 500 元新幣協助 40 到 60 歲的勞工就業或轉職. \n 愛沙尼亞的教育資訊系統 (EHIS) 儲存 2005 年以來, 學生受教的資訊與統計數據, 能夠協助老師調整教學方法, 成為政府確保未來勞動力的重要依據, 也能 促進老師和教育科技廠商共同開發新的科技教材、教具 , 啟發學生自主學習動機. \n 建議推動方向: \n ‒打造 全齡個人學習帳戶 \n ‒推動 數位師資 培訓革新 \n \n', 'tags': '', 'url': '創新教育.html'}, {'title': '網際程式開發', 'text': '實習目的: \n \n \n 利用網際模組擷取資料 ( Python requests ) \n \n \n 利用 bs4 擷取網頁資料 \n \n \n 利用 Flask 編寫網際程式 \n \n \n 利用 Heroku 部署網際程式 \n \n \n 利用 Ubuntu 虛擬主機作為伺服器 \n \n \n 先看懂 \xa0 https://github.com/mdecourse/scissor-rock-paper2/blob/main/wsgi.py \n request . args . get ( \'user\' ) 以 GET 方式取得 user 出拳變數值 \n 電腦出拳以亂數取值 \n 兩者比較後傳回超文件顯示比賽結果 \n 部署到 Heroku 需要 \xa0 requirements.txt , \xa0 runtime.txt \xa0 與 \xa0 Procfile . \n 接著請試著透過 \xa0 http://mde.tw/lab/content/Heroku.html \xa0 與 \xa0 http://mde.tw/cp2020/content/Heroku.html \xa0 的導引, 將 \xa0 Topic0 \xa0 中的機械設計系實驗室排課時間表程式部署到 Heroku. 至於個人 Github 靜態網站也可以同步一份到 Heroku. \n Beautifulsoup 參考教材: \n beautifulsoup.pdf \n WebScraping_with_bs4.pdf \n beautiful_soup_tutorial.pdf \n 2019_beautifulsoup_document.pd \n Flask 參考教材: \n flask.pdf \n flask_tutorial.pdf \n flask_document.pdf \n 2021_flask_document.pdf \n https://realpython.com/primer-on-python-decorators/ \n https://www.programiz.com/python-programming/decorator \n https://www.python-course.eu/python3_decorators.php \n Python has a feature called decorators to add functionality to an existing code. This is also called metaprogramming because a part of the program tries to modify another part of the program at compile time. \n Decorators allow us to wrap another function in order to extend the behavior of the wrapped function, without permanently modifying it. \n Heroku 參考教材: \n http://mde.tw/cp2020/content/Heroku.html \n http://mde.tw/cp2020/content/scissor-rock-paper.html \xa0 ( https://scissor-rock-paper.herokuapp.com ) \n https://github.com/mdecourse/scissor-rock-paper2 \xa0 ( https://scissor-rock-paper2.herokuapp.com/ ) \n heroku.pdf \n 2017_web_apps.pdf \n Ubuntu server 參考教材 . \n Topic 0 \xa0 已經列出兩組可以從學校教務主機擷取資料的程式, 分別可以根據學期代號與班級代號取出班級排課表, 還有利用學期代號與實習實驗室代號擷取排客時間表. \n 接下來實習的目標是希望寫一組程式可以擷取機械設計工程系各實習實驗室排課表, 並且統計各實驗室每週排課總時數. \n 我們先來看 \xa0 Python requests \xa0 的用法: \n W5_requests_ex1.py \n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n 7 \n \n \n \n import   requests \n \xa0 \n r  =   requests.get( "https://mde.tw" ) \n print ( "status_code:" , r.status_code) \n print ( "content-type:" , r.headers[ \'content-type\' ]) \n print ( "encoding:" , r.encoding) \n print ( "text:" , r.text) \n \n \n \n \n \n \n 要看懂下列程式, 必須知道何謂 \xa0 html entity , 而且要會使用 requests.post() 與 bs4.BeautifulSoup() \n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n 7 \n 8 \n 9 \n 10 \n 11 \n 12 \n 13 \n 14 \n 15 \n 16 \n 17 \n 18 \n 19 \n 20 \n 21 \n 22 \n 23 \n 24 \n 25 \n 26 \n 27 \n 28 \n 29 \n 30 \n 31 \n 32 \n 33 \n 34 \n 35 \n 36 \n 37 \n 38 \n 39 \n 40 \n 41 \n 42 \n 43 \n 44 \n 45 \n 46 \n 47 \n 48 \n 49 \n 50 \n 51 \n 52 \n 53 \n 54 \n 55 \n 56 \n 57 \n 58 \n 59 \n 60 \n 61 \n 62 \n 63 \n 64 \n 65 \n 66 \n 67 \n 68 \n 69 \n \n \n \n import   requests \n import   bs4 \n # for os.environ and os.system() \n import   os \n # for geting html file path \n import   pathlib \n \xa0 \xa0 \n # for pythn 3.9 \n proxy  =   \'http://[2001:288:6004:17::69]:3128\' \n \xa0 \xa0 \n os.environ[ \'http_proxy\' ]  =   proxy  \n os.environ[ \'HTTP_PROXY\' ]  =   proxy \n os.environ[ \'https_proxy\' ]  =   proxy \n os.environ[ \'HTTPS_PROXY\' ]  =   proxy \n \xa0 \xa0 \n \'\'\' \n url:\xa0 \'class_ajax.php\', \n data: { pselyr: pselyr, pselclss: pselclss \n \'\'\' \n semester  =   \'1092\' \n classno  =   \'42311\' \n column  =   True \n \xa0 \xa0 \n if   semester  = =   None : \n \xa0\xa0\xa0\xa0 semester  =   \'1091\' \n if   classno  = =   None : \n \xa0\xa0\xa0\xa0 # 42311 is 設一甲 \n \xa0\xa0\xa0\xa0 classno  =   \'42311\' \n \xa0\xa0\xa0\xa0\xa0 \xa0 \n headers  =   { \'X-Requested-With\' :  \'XMLHttpRequest\' } \n \xa0 \xa0 \n url  =   \'https://qry.nfu.edu.tw/class_ajax.php\' \n post_var  =   { \'pselyr\' : semester,  \'pselclss\' : classno} \n \xa0 \xa0 \n result  =   requests.post(url, data  =   post_var, headers  =   headers) \n \xa0 \xa0 \n # result.content 傳回 binary 資料 \n # soup = bs4.BeautifulSoup(result.content, \'lxml\') \n # result.text 傳回純文字資料 \n soup  =   bs4.BeautifulSoup(result.text,  \'lxml\' ) \n \xa0 \xa0 \n # 先除掉所有 anchor \n for   a  in   soup.findAll( \'a\' ): \n \xa0\xa0\xa0\xa0 # bs3 語法 \n \xa0\xa0\xa0\xa0 #a.replaceWithChildren() \n \xa0\xa0\xa0\xa0 # bs4 語法, 將標註與內容拆開 \n \xa0\xa0\xa0\xa0 a.unwrap() \n \xa0 \xa0 \n # 根據輸出設定, 取出 class=\'tbcls\' 的 table 資料 \n table  =   soup.find( \'table\' , { \'class\' :  \'tbcls\' }) \n \xa0 \xa0 \n # 重建 table, 設定邊線為 1 pixel \n output  =   "<table border=\'1\'>" \n \xa0 \xa0 \n for   i  in   table.contents: \n \xa0\xa0\xa0\xa0 # 利用 replace 復原\xa0  \n \xa0\xa0\xa0\xa0 # https://www.w3schools.com/html/html_entities.asp \n \xa0\xa0\xa0\xa0 # https://developer.mozilla.org/en-US/docs/Glossary/Entity \n \xa0\xa0\xa0\xa0 output  + =   str (i).replace( "&amp;nbsp" ,  " " ) \n output  + =   "</table>" \n # print(output) \n # 將 output 寫入 w1_class_local.html \n with  open ( "w1_class_local.html" ,  "w" , encoding = "utf-8" ) as  file : \n \xa0\xa0\xa0\xa0 file .write(output) \n # 利用 os.system() 以 default browser 開啟 w1_class_local.html \n filePath  =   pathlib.Path(__file__).parent.absolute() \n #print(filePath) \n # set firefox as default browser and start url to open html file \n os.system( "start file:///"   +   str (filePath)  +   "\\\\w1_class_local.html" ) \n \n \n \n \n \n \n 以上在 CMSMDE 列出程式碼, 有一個技巧, 針對 \xa0 Html entity \xa0 符號必須將 & 表示為 &amp; 否則在頁面程式引用時無法正確顯示出原始碼內容. \n Flask example: \n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n 7 \n 8 \n 9 \n 10 \n 11 \n 12 \n 13 \n 14 \n 15 \n 16 \n 17 \n 18 \n 19 \n 20 \n 21 \n 22 \n 23 \n 24 \n 25 \n 26 \n 27 \n 28 \n 29 \n 30 \n 31 \n 32 \n 33 \n 34 \n \n \n \n from   flask  import   Flask, request \n from   datetime  import   datetime \n import   os \n \xa0 \n # for pythn 3.9 \n proxy  =   \'http://[2001:288:6004:17::69]:3128\' \n \'\'\'  \n os.environ[\'http_proxy\'] = proxy  \n os.environ[\'HTTP_PROXY\'] = proxy \n os.environ[\'https_proxy\'] = proxy \n os.environ[\'HTTPS_PROXY\'] = proxy \n \'\'\' \n app  =   Flask(__name__) \n \xa0 \n # https://realpython.com/primer-on-python-decorators/ \n @app .route( \'/\' ) \n def   hello(): \n \xa0\xa0\xa0\xa0 # 若取不到 name 則 name = None \n \xa0\xa0\xa0\xa0 name  =   request.args.get( \'name\' ) \n \xa0\xa0\xa0\xa0 if   name  = =   None : \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 name  =   "test" \n \xa0\xa0\xa0\xa0 # https://realpython.com/python-formatted-output/ \n \xa0\xa0\xa0\xa0 return   HELLO_HTML. format ( \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 name,  str (datetime.now())) \n \xa0 \n HELLO_HTML  =   """ \n \xa0\xa0\xa0\xa0 <html><body> \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 <h1>Hello, {0}!</h1> \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 現在時間為: {1}. \n \xa0\xa0\xa0\xa0 </body></html>""" \n \xa0 \n if   __name__  = =   "__main__" : \n \xa0\xa0\xa0\xa0 # Launch the Flask dev server \n \xa0\xa0\xa0\xa0 app.run(host = "localhost" , debug = True ) \n \n \n \n \n \n \n', 'tags': '', 'url': '網際程式開發.html'}, {'title': '開放教科書', 'text': 'https://www.openculture.com/free_textbooks \xa0 (K-12) \n https://openstax.org/subjects \xa0 (University) \n \n 透過理論分析與模擬進行產品設計: \n https://github.com/OpenFOAM \n 有限元素分析法教科書: \xa0 http://web.mit.edu/kjb/www/Books/FEP_2nd_Edition_4th_Printing.pdf \n', 'tags': '', 'url': '開放教科書.html'}, {'title': 'w7', 'text': 'Heroku-實作 \n 步驟一: \xa0 ( 建立 Heroku 帳號 ) 進入 \xa0 https://heroku.com , 利用學校配發的 @gm 登記一個 Heroku 帳號, 關鍵在於密碼設定必須要至少 8 個字元, 且字元中必須包含符號, 英文字母及數字,\xa0 並且登記後要進入 @gm 帳號進行確認後才能開通 Heroku 帳號. \n 完成帳號登記後, 必須知道目前 Heroku 只允許免費建立五個應用程式, 且每個程式的最大容量為 500MB. \n 步驟二: \xa0 ( 建立 Heroku app ) 登入 Heroku 後, 先以 s + 學號 建立第一個 app, 完成後, 將可至 https://s學號.herokuapp.com 連線取得網站最初內容. \n 步驟三: \xa0 (下載 Heroku CLI) 從 \xa0 http://a.kmol.info:88/heroku.7z \xa0 下載 Heroku cli 程式檔案, 解開至隨身碟 Y: 所在位置或者是 Hybrid 設定的位置. \n 步驟四: \xa0 ( 修改命令搜尋路徑 ) 修改隨身系統的啟動批次檔案, 讓 Windows 的命令視窗中可以執行 heroku.exe, 或者稱作"設法將 heroku.exe 所在目錄位置, 設為 Windows 搜尋路徑之一". \n 重新啟動已經納入可執行 heroku.exe 的隨身碟 start_ipv6.bat 或 start_ipv4.bat \n 步驟五: \xa0 ( 測試 heroku 執行 ) 測試是否能夠在修改後的命令列中執行 heroku.exe, 輸入 heroku version 若回應所使用的版本表示上述路徑設定已經成功. \n 步驟六: \xa0 ( 設定 heroku 代理主機 ) 先前我們已經知道網路的應用包含 client 與 server, 不同 client 採用不同的 proxy 設定與 server 連線, 其中 firefox 作為 WWW 網路協定的 client, 有其自己的網路 Proxy 設定, 也可以直接使用操作系統的 Proxy 設定. \n Chrome 作為 WWW 網路協定的 client, 目前 Windows 下的最新版, 只能使用操作系統的 Proxy 設定. \n 而 git 作為 git client 與 github server 連線的 Proxy 設定, 則寫在 y:\\home_ipv6 下的 .giconfig 中,\xa0 以 git config --global http.proxy "http://your_proxy:port" 進行設定. \n 相同的道理 heroku cli 作為 \xa0 https://heroku.com \xa0 伺服器的 client 端, 也有其 Proxy 的設定方式, 也就是在 start_ipv6.bat 中加入: \n \n \n \n \n \n \n 1 \n 2 \n 3 \n \n \n \n REM  for   heroku login \n set HTTP_PROXY=http: //[2001:288:6004:17::53]:3128 \n set HTTPS_PROXY=http: //[2001:288:6004:17::53]:3128 \n \n \n \n \n \n \n \n 步驟七: \xa0 ( 設定同步倉儲 ) 針對利用 Heroku 同步 Github Pages 上的網站內容, 只需要透過 git remote add (Heroku 指令為 heroku git:remote -a heroku_倉儲_名稱, 之後只要在 heroku login 狀態下, 可以直接利用 git push) 在近端設定一個連線到 Heroku 倉儲的代號, 就能在每次更新 Github Pages 倉儲後, 再將內容同步至 Heroku. 網際內容管理課程將使用兩種 Heroku app 設定, 也就是靜態網頁與動態網頁: \n 靜態網頁 - 採用 php 方式部署, 讓 Heroku 將靜態網頁視為 PHP 程式, 利用 index.php 跳轉到 index.html \n 動態網頁 - 讓 Heroku 執行 cmsimde/wsgi.py 的方式進行雲端伺服. \n 步驟八: \xa0 ( 以 git 進行提交推送 ) 利用 heroku git:remote -a 設定的同步倉儲其推送名稱內定為 "heroku", 使用者只要使用 git push heroku 就可以將改版內容推送到對應的 Heroku app 倉儲. \n 指令操作步驟: \n \n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n \n \n \n # 以 interactive 模式登入 Heroku, 完成後產生 y:\\home_ipv6\\_netrc \n heroku login  - i \n # 針對已經登入的 Heroku 帳號下的 taiwan-01 app, 設為此倉儲的 remote 同步倉儲, 且在倉儲中會自建名稱為 heroku 的 remoate site. \n heroku git:remote  - a taiwan - no1 \n \n \n \n \n \n \n \n 上述步驟完成後的 Heroku 網站: \xa0 https://taiwan-no1.herokuapp.com', 'tags': '', 'url': 'w7.html'}]};